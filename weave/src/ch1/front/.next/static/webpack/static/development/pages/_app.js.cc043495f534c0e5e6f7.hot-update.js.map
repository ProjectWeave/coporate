{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.cc043495f534c0e5e6f7.hot-update.js","sources":["webpack:///./components/ContentForm.js","webpack:///./reducers/post.js"],"sourcesContent":["// mode변경 test\r\nimport React, { useCallback, useState, useEffect }  from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\r\n\r\nimport '../components/Contents.css';\r\nimport Link from 'next/link';\r\nimport '../components/reset.css';\r\n\r\nconst ContentForm = ({post}) => {\r\n    \r\n    const [comments, setComments ] = useState('');\r\n    const [ commentFormOpened, setCommentFormOpened] = useState(false);\r\n    const { me } = useSelector(state => state.user);\r\n    const dispatch = useDispatch();\r\n\r\n    const { imagePaths, postAdded, mainPosts, commentAdded, isAddingComment } = useSelector(state => state.post);\r\n\r\n    // 댓글\r\n    const onChangeComment = useCallback((e) => {\r\n        setComments(e.target.value);\r\n    }, []);\r\n\r\n    //댓글창토글\r\n    const onToggleComment = useCallback(() => {\r\n        setCommentFormOpened(prev => !prev);\r\n      }, []);\r\n\r\n    // 댓글올리기 사이클\r\n    const onSubmitComment = useCallback((e) => {\r\n        e.preventDefault();\r\n        if(!me){\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n        return dispatch({\r\n            type: ADD_COMMENT_REQUEST,\r\n            data:{\r\n                postId: post.id,\r\n            },\r\n        });\r\n    }, [me && me.id]);\r\n    \r\n    // 댓글 성공시, 빈텍스트로 \r\n    useEffect(() => {\r\n        setComments('');\r\n    },[commentAdded === true]);\r\n\r\n    const onRemoveComments = () => {\r\n        alert('댓글을 삭제하시겠습니까?');\r\n    };\r\n\r\n    return(\r\n        <>\r\n            {/* 게시물올라갈부분 */}\r\n            {/* {mainPosts.map((v) => { */}\r\n                {/* return( */}\r\n                    <div className=\"postbox\">   \r\n                        <div className=\"contBox\">\r\n                            <p>{post.id} 님의 게시물</p>\r\n                            <img style={{display:\"block\", margin:\"0 auto\", height:\"200px\"}} alt=\"example\" src={post.img}/> \r\n                            <div>{post.content}</div>\r\n                        </div>\r\n                        <div className=\"btnsbox\">\r\n                            <button type=\"button\" className=\"commentBtn\"  value={commentFormOpened} onClick={onToggleComment} />\r\n                            <button type=\"button\" className=\"likeBtn\" /> \r\n                            <button type=\"button\" className=\"removeBtn\" />\r\n                            {commentFormOpened===true &&\r\n                                <form className=\"commentbox\" onSubmit={onSubmitComment}>\r\n                                    <textarea className=\"comment\" value={comments} onChange={onChangeComment} />\r\n                                    <button type=\"primary\" htmlType=\"submit\" className=\"combtn\" loading={isAddingComment} >COMMENT</button>\r\n                                </form>\r\n                            }\r\n                            {/* 댓글올라갈부분 */}\r\n                            {commentFormOpened===true && (\r\n                                <div style={{display:\"inline-block\", width:\"100%\"}}>\r\n                                    <p style={{marginLeft:\"10px\"}}>{commentAdded ? '댓글' + post.Comments.length : '댓글'+ '0'}</p>\r\n                                    <div className=\"comline\"></div>\r\n                                            {/* <li style={{\r\n                                                listStyle:\"none\", display:\"inline-block\", clear:\"both\"}}\r\n                                            >\r\n                                                {post.id} : {post.content}\r\n                                                <button type=\"button\" className=\"remove\" onClick={onRemoveComments} >REMOVE</button>\r\n                                            </li> */}\r\n                                    { mainPosts.map((v) => {\r\n                                        return( \r\n                                            <li key={v.createdAt} style={{\r\n                                                listStyle:\"none\", display:\"inline-block\", clear:\"both\"}}\r\n                                            >\r\n                                                {v.User.nickname} : {v.content}\r\n                                                <button type=\"button\" className=\"remove\" onClick={onRemoveComments} >REMOVE</button>\r\n                                            </li>\r\n                                        );\r\n                                    })\r\n                                    }\r\n                                </div>\r\n                                )\r\n                            }\r\n                        </div> \r\n                    </div>\r\n                {/* ); */}\r\n            {/* })\r\n            } */}\r\n        </>\r\n    );\r\n    \r\n\r\n};\r\n\r\nContentForm.propTypes={\r\n    post: PropTypes.shape({\r\n        User: PropTypes.object,\r\n        content: PropTypes.string,\r\n        img: PropTypes.string,\r\n    }),\r\n};\r\n\r\n\r\nexport default ContentForm;\r\n","export const initialState={\r\n    mainPosts:[{\r\n        id: 1,\r\n        User:{\r\n            id: 1,\r\n            nickname: \"위브\",\r\n        },\r\n        content: \"첫번째 게시글입니다.(메인포스트)\",\r\n        img:\"http://www.9dog.co.kr/wp-content/uploads/2013/07/img-01.jpg\", \r\n        Comments: [],\r\n    }], \r\n    imagePaths:[], //미리보기 이미지경로\r\n    addPostErrorReason: false,  //포스트 업로드 실패사유\r\n    isAddingPost: false,  //포스트 업로드중\r\n    postAdded : false, //포스트 업로드 성공\r\n    isAddingComment: false,\r\n    addCommentErrorReason: '',\r\n    commentAdded: false,\r\n    addingGroupPost: false, // 그룹만들기폴더 업로드중\r\n    GroupErrorReason: '', //그룹만들기업로드 실패사유\r\n    addedGroupPost: false, // 그룹만들기폴더 업로드 성공\r\n\r\n};\r\nexport const initialStateForGroup={// 화면에 보일 포스트들 \r\n    GroupPosts:[{\r\n        id: 2,\r\n        User:{\r\n            id: 1,\r\n            nickname: \"위브\",\r\n        },\r\n        content: \"두리안그룹(그룹포스트)\",\r\n        img:\"https://img1.daumcdn.net/thumb/R720x0/?fname=http://t1.daumcdn.net/liveboard/dailylife/187ea4bc2ad54b1db5030743265c5397.jpg\", \r\n        gtext: [\"두리안 좋아하는사람들의 모임\"],\r\n    }], // 그룹화면에 보일 포스트들 \r\n    imagePaths:[], //미리보기 이미지경로\r\n    isAddingComment: false,\r\n    addCommentErrorReason: '',\r\n    commentAdded: false,\r\n    addingGroupPost: false, // 그룹만들기폴더 업로드중\r\n    GroupErrorReason: '', //그룹만들기업로드 실패사유\r\n    addedGroupPost: false, // 그룹만들기폴더 업로드 성공\r\n\r\n};\r\nexport const initialStatetest={\r\n    CommentPosts:[{\r\n        id: 1,\r\n        User:{\r\n            id: 1,\r\n            nickname: \"위브\",\r\n        },\r\n        content: \"테스트용.(커멘트포스트)\",\r\n        img:\"http://www.9dog.co.kr/wp-content/uploads/2013/07/img-01.jpg\", \r\n        Comments: [],\r\n    }], \r\n    imagePaths:[], //미리보기 이미지경로\r\n    addPostErrorReason: false,  //포스트 업로드 실패사유\r\n    isAddingPost: false,  //포스트 업로드중\r\n    postAdded : false, //포스트 업로드 성공\r\n    isAddingComment: false,\r\n    addCommentErrorReason: '',\r\n    commentAdded: false,\r\n    addingGroupPost: false, // 그룹만들기폴더 업로드중\r\n    GroupErrorReason: '', //그룹만들기업로드 실패사유\r\n    addedGroupPost: false, // 그룹만들기폴더 업로드 성공\r\n\r\n};\r\nconst dummyPosts = {\r\n    id:2,\r\n    User: {\r\n        id: 1,\r\n        nickname: '위브',\r\n    },\r\n    content: '위브위브위브(더미포스트)',\r\n    img:\"https://img.bemypet.kr/content/2018/10/07172706/puppies-1871260_1920.jpg\", \r\n    Comments: [],\r\n};\r\n\r\nconst dummyComment = {\r\n    id:1,\r\n    User : {\r\n      id:1,\r\n      nickname:\"위브\",\r\n  },\r\n    createdAt: new Date(),\r\n    content: '위브댓글입니다(더미커멘트).',\r\n};\r\n\r\nconst dummyGroupPost = {\r\n    id:1,\r\n    User : {\r\n      id:1,\r\n      nickname:\"위브\",\r\n  },\r\n    createdAt: new Date(),\r\n    content: \"위브글입니다.(더미그룹포스트)\",\r\n};\r\n\r\n// mainPosts:[{\r\n//     id:1,\r\n//     User:{\r\n//         id: 1,\r\n//         nickname: \"위브\",\r\n//     },\r\n//     content: \"첫번째 게시글\",\r\n//     img:\"https://img1.daumcdn.net/thumb/R720x0/?fname=http://t1.daumcdn.net/liveboard/dailylife/187ea4bc2ad54b1db5030743265c5397.jpg\", \r\n//     Comments: [],\r\n// }], // 화면에 보일 포스트들 \r\n\r\n\r\n\r\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\r\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\r\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\r\n\r\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\r\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\r\n\r\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\r\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\r\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENTS_REQUEST';\r\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENTS_SUCCESS';\r\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENTS_FAILURE';\r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_GROUP_REQUEST = 'ADD_GROUP_REQUEST';\r\nexport const ADD_GROUP_SUCCESS = 'ADD_GROUP_SUCCESS';\r\nexport const ADD_GROUP_FAILURE = 'ADD_GROUP_FAILURE';\r\n\r\nconst ADD_POST = \"ADD_POST\";\r\nconst ADD_GROUPPOST = \"ADD_GROUPPOST\";\r\nconst ADD_DUMMY = \"ADD_DUMMY\";\r\n\r\nconst addPost={\r\n    type: ADD_POST,   \r\n};\r\nconst addGroupPost={\r\n    type: ADD_GROUPPOST,   \r\n};\r\n\r\n// const addDummy = {\r\n//     type: ADD_DUMMY,\r\n//     data:{\r\n//         content:'Hello',\r\n//         UserId: 1,\r\n//         User:{\r\n//             nickname:\"두리안\",\r\n//         },\r\n//     },\r\n// };\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type){\r\n        case ADD_POST_REQUEST: {\r\n            return {\r\n                ...state, //immutable\r\n                isAddingPost: true,\r\n                addPostErrorReason: '',\r\n                postAdded: false,\r\n            };\r\n        }\r\n        case ADD_POST_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                isAddingPost: false, \r\n                mainPosts: [dummyPosts, ...state.mainPosts],\r\n                postAdded: true, \r\n            };\r\n        }\r\n        case ADD_POST_FAILURE: {\r\n            return {\r\n                ...state,\r\n                isAddingPost: false,\r\n                addPostErrorReason : action.error,\r\n            };\r\n        }\r\n        case ADD_COMMENT_REQUEST: {\r\n            return {\r\n                ...state, //immutable\r\n                isAddingComment: true,\r\n                addCommentErrorReason: '',\r\n                commentAdded: false,\r\n            };\r\n        }\r\n        case ADD_COMMENT_SUCCESS: { //immutable\r\n            const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);//어떤게시물에 댓글을 작성할것인지\r\n            const post = state.mainPosts[postIndex];\r\n            const Comments = [...post.Comments, dummyComment];\r\n            const mainPosts = [...state.mainPosts];\r\n            mainPosts[postIndex] = { ...post, Comments };\r\n            return {\r\n                ...state,\r\n                isAddingComment: false, \r\n                mainPosts,\r\n                commentAdded: true, \r\n            };\r\n        } \r\n        case ADD_COMMENT_FAILURE: {\r\n            return {\r\n                ...state,\r\n                isAddingComment: false,\r\n                addCommentErrorReason : action.error,\r\n            };\r\n        }\r\n        //그룹만들기 업로드 \r\n        case ADD_GROUP_REQUEST: {\r\n            return {\r\n                ...state,\r\n                addingGroupPost: true,\r\n                GroupErrorReason : '',\r\n                addedGroupPost: false,\r\n            };\r\n        }\r\n        case ADD_GROUP_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                addingGroupPost: false,\r\n                GroupPosts: [dummyGroupPost, ...state.GroupPosts],\r\n                addedGroupPost: true,\r\n            };\r\n        }\r\n        case ADD_GROUP_FAILURE: {\r\n            return {\r\n                ...state,\r\n                addedGroupPost: false,\r\n                GroupErrorReason : action.error,\r\n            };\r\n        }\r\n        default: {\r\n            return{\r\n                ...state,\r\n            };\r\n        }\r\n    }\r\n};\r\n\r\n// export default (state = initialStateForGroup, action) => {\r\n//     switch (action.type){\r\n//         //그룹만들기 업로드 \r\n//         case ADD_GROUP_REQUEST: {\r\n//             return {\r\n//                 ...state,\r\n//                 addingGroupPost: true,\r\n//                 GroupErrorReason : '',\r\n//                 addedGroupPost: false,\r\n//             };\r\n//         }\r\n//         case ADD_GROUP_SUCCESS: {\r\n//             return {\r\n//                 ...state,\r\n//                 addingGroupPost: false,\r\n//                 GroupPosts: [dummyGroupPost, ...state.GroupPosts],\r\n//                 addedGroupPost: true,\r\n//             };\r\n//         }\r\n//         case ADD_GROUP_FAILURE: {\r\n//             return {\r\n//                 ...state,\r\n//                 addedGroupPost: false,\r\n//                 GroupErrorReason : action.error,\r\n//             };\r\n//         }\r\n//         default: {\r\n//             return{\r\n//                 ...state,\r\n//             };\r\n//         }\r\n//     }\r\n// };\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAFA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtHA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AARA;AAUA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AArBA;AAuBA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AARA;AASA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAlBA;AAoBA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AARA;AAUA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AArBA;AAuBA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AARA;AAWA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAPA;AAUA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAPA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AADA;AAGA;AACA;AADA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AACA;AAGA;AAhFA;AAkFA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}