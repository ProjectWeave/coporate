{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.400312b47cfad3cf56db.hot-update.js","sources":["webpack:///./sagas/user.js"],"sourcesContent":["import { all, fork, call, put, takeEvery } from 'redux-saga/effects';\r\nimport axios from \"axios\";\r\nimport { \r\n    LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, \r\n    SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS, \r\n    LOG_OUT_REQUEST,LOG_OUT_SUCCESS, LOG_OUT_FAILURE,\r\n    LOAD_USER_REQUEST,LOAD_USER_SUCCESS,LOAD_USER_FAILURE\r\n} from \"../reducers/user\";\r\n\r\n// axios.defaults.baseURL = 'http://localhost:3065/api';\r\n\r\n// 로그인 하기\r\nfunction loginAPI(loginData){\r\n    //서버에 요청을 보내는 부분\r\n    return axios.post('user/login', loginData, {\r\n        withCredentials: true,\r\n    });\r\n}\r\nfunction* login(action) {\r\n    try {\r\n      const result = yield call(loginAPI, action.data);\r\n      yield put({ // put은 dispatch 동일\r\n        type: LOG_IN_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) { // loginAPI 실패\r\n      console.error(e);\r\n      yield put({\r\n        type: LOG_IN_FAILURE,\r\n      });\r\n    }\r\n  }\r\nfunction* watchLogin(){\r\n    yield takeEvery(LOG_IN_REQUEST, login);\r\n}\r\n\r\n// 회원가입하기\r\nfunction signUpAPI(signUpData){\r\n    //서버에 요청을 보내는 부분\r\n    return axios.post('/user/', signUpData);\r\n}\r\nfunction* signUp(action){\r\n    try {\r\n        // yield fork(logger);  // logger는 내기록을 로깅하는 함수,\r\n        // yield delay(2000);\r\n        yield call(signUpAPI, action.data);\r\n        yield put({ \r\n            type: SIGN_UP_SUCCESS,\r\n        });\r\n    } catch (e) { // 회원가입 실패시\r\n        console.error(e);\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n            error: e\r\n        });\r\n    }\r\n}\r\nfunction* watchSignUp(){\r\n    yield takeEvery(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\n\r\n// 로그아웃하기\r\nfunction logOutAPI(){\r\n    //서버에 요청을 보내는 부분\r\n    return axios.post('/user/logout', {}, {\r\n        withCredentials: true,\r\n    });\r\n}\r\nfunction* logout(){\r\n    try {\r\n        // yield delay(1000);\r\n        yield call(logOutAPI);\r\n        yield put({ // put은 dispatch와 동일\r\n            type: LOG_OUT_SUCCESS,\r\n        });\r\n    } catch (e) { // 로그아웃 실패시\r\n        console.error(e);\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\nfunction* watchLogout(){\r\n    yield takeEvery(LOG_OUT_REQUEST, logout);\r\n}\r\n\r\n// 로그인한 유저 로드하기\r\nfunction loadUserAPI() {\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.get('/user/', {\r\n      withCredentials: true,\r\n    });\r\n}  \r\nfunction* loadUser() {\r\n    try {\r\n      // yield call(loadUserAPI);\r\n      const result = yield call(loadUserAPI);\r\n      yield put({\r\n        type: LOAD_USER_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) { // loadUserAPI 실패시\r\n      console.error(e);\r\n      yield put({\r\n        type: LOAD_USER_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n}\r\nfunction* watchLoadUser() {\r\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\r\n}\r\n\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchSignUp), //순서의미없음\r\n        fork(watchLoadUser),\r\n        fork(watchLogout),\r\n        \r\n    ]);\r\n}\r\n\r\n/// call은 동기호출, 순서있음\r\n/// fork는 비동기호출, 순서없음\r\n/// take : 해당액션이 dispatch 되면 제너레이터를 next(재게)하게한다\r\n/// yield : 제너레이터함수에서 중단하는 역할\r\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AASA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAIA;AAGA;AACA;AACA;;;;A","sourceRoot":""}