{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"위브\"\n    },\n    content: \"첫번째 게시글입니다.(메인포스트)\",\n    img: \"http://www.9dog.co.kr/wp-content/uploads/2013/07/img-01.jpg\",\n    Comments: []\n  }],\n  CommentPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"위브\"\n    },\n    content: \"테스트용.(커멘트포스트)\",\n    img: \"http://www.9dog.co.kr/wp-content/uploads/2013/07/img-01.jpg\",\n    Comments: []\n  }],\n  GroupPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"위브\"\n    },\n    content: \"두리안그룹(그룹포스트)\",\n    img: \"https://img1.daumcdn.net/thumb/R720x0/?fname=http://t1.daumcdn.net/liveboard/dailylife/187ea4bc2ad54b1db5030743265c5397.jpg\",\n    gtext: [\"두리안 좋아하는사람들의 모임\"]\n  }],\n  // 그룹화면에 보일 포스트들  \n  imagePaths: [],\n  //미리보기 이미지경로\n  addPostErrorReason: false,\n  //포스트 업로드 실패사유\n  isAddingPost: false,\n  //포스트 업로드중\n  postAdded: false,\n  //포스트 업로드 성공\n  isAddingComment: false,\n  addCommentErrorReason: '',\n  commentAdded: false,\n  addingGroupPost: false,\n  // 그룹만들기폴더 업로드중\n  GroupErrorReason: '',\n  //그룹만들기업로드 실패사유\n  addedGroupPost: false // 그룹만들기폴더 업로드 성공\n\n};\nconst dummyPosts = {\n  id: 2,\n  User: {\n    id: 1,\n    nickname: '위브'\n  },\n  content: '위브위브위브(더미포스트)',\n  img: \"https://img.bemypet.kr/content/2018/10/07172706/puppies-1871260_1920.jpg\",\n  Comments: []\n};\nconst dummyComment = {\n  id: 1,\n  User: {\n    id: 1,\n    nickname: \"위브\"\n  },\n  createdAt: new Date(),\n  content: '위브댓글입니다(더미커멘트).'\n};\nconst dummyGroupPost = {\n  id: 1,\n  User: {\n    id: 1,\n    nickname: \"위브\"\n  },\n  createdAt: new Date(),\n  content: \"위브글입니다.(더미그룹포스트)\"\n};\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENTS_REQUEST';\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENTS_SUCCESS';\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENTS_FAILURE';\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_GROUP_REQUEST = 'ADD_GROUP_REQUEST';\nexport const ADD_GROUP_SUCCESS = 'ADD_GROUP_SUCCESS';\nexport const ADD_GROUP_FAILURE = 'ADD_GROUP_FAILURE'; // const ADD_POST = \"ADD_POST\";\n// const ADD_GROUPPOST = \"ADD_GROUPPOST\";\n// const ADD_DUMMY = \"ADD_DUMMY\";\n// const addPost={\n//     type: ADD_POST,   \n// };\n// const addGroupPost={\n//     type: ADD_GROUPPOST,   \n// };\n\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isAddingPost: true,\n          addPostErrorReason: '',\n          postAdded: false\n        });\n      }\n\n    case ADD_POST_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isAddingPost: false,\n          mainPosts: [action.data, ...state.mainPosts],\n          postAdded: true\n        });\n      }\n\n    case ADD_POST_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isAddingPost: false,\n          addPostErrorReason: action.error\n        });\n      }\n\n    case ADD_COMMENT_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isAddingComment: true,\n          addCommentErrorReason: '',\n          commentAdded: false\n        });\n      }\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId); //어떤게시물에 댓글을 작성할것인지\n\n        const post = state.mainPosts[postIndex];\n        const Comments = [...post.Comments, data.comment];\n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = _objectSpread({}, post, {\n          Comments\n        });\n        return _objectSpread({}, state, {\n          isAddingComment: false,\n          mainPosts,\n          commentAdded: true\n        });\n      }\n\n    case ADD_COMMENT_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isAddingComment: false,\n          addCommentErrorReason: action.error\n        });\n      }\n\n    case LOAD_MAIN_POSTS_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          mainPosts: []\n        });\n      }\n\n    case LOAD_MAIN_POSTS_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          mainPosts: action.data\n        });\n      }\n\n    case LOAD_MAIN_POSTS_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n    //그룹만들기 업로드 \n\n    case ADD_GROUP_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          addingGroupPost: true,\n          GroupErrorReason: '',\n          addedGroupPost: false\n        });\n      }\n\n    case ADD_GROUP_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          addingGroupPost: false,\n          GroupPosts: [dummyGroupPost, ...state.GroupPosts],\n          addedGroupPost: true\n        });\n      }\n\n    case ADD_GROUP_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          addedGroupPost: false,\n          GroupErrorReason: action.error\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n});","map":{"version":3,"sources":["C:/Users/이귀영/Documents/coporate/weave/src/ch1/front/reducers/post.js"],"names":["initialState","mainPosts","id","User","nickname","content","img","Comments","CommentPosts","GroupPosts","gtext","imagePaths","addPostErrorReason","isAddingPost","postAdded","isAddingComment","addCommentErrorReason","commentAdded","addingGroupPost","GroupErrorReason","addedGroupPost","dummyPosts","dummyComment","createdAt","Date","dummyGroupPost","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","REMOVE_IMAGE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_GROUP_REQUEST","ADD_GROUP_SUCCESS","ADD_GROUP_FAILURE","state","action","type","data","error","postIndex","findIndex","v","postId","post","comment"],"mappings":"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","sourcesContent":["export const initialState={\r\n    mainPosts:[{\r\n        id: 1,\r\n        User:{\r\n            id: 1,\r\n            nickname: \"위브\",\r\n        },\r\n        content: \"첫번째 게시글입니다.(메인포스트)\",\r\n        img:\"http://www.9dog.co.kr/wp-content/uploads/2013/07/img-01.jpg\", \r\n        Comments: [],\r\n    }], \r\n    CommentPosts:[{\r\n        id: 1,\r\n        User:{\r\n            id: 1,\r\n            nickname: \"위브\",\r\n        },\r\n        content: \"테스트용.(커멘트포스트)\",\r\n        img:\"http://www.9dog.co.kr/wp-content/uploads/2013/07/img-01.jpg\", \r\n        Comments: [],\r\n    }],\r\n    GroupPosts:[{\r\n        id: 1,\r\n        User:{\r\n            id: 1,\r\n            nickname: \"위브\",\r\n        },\r\n        content: \"두리안그룹(그룹포스트)\",\r\n        img:\"https://img1.daumcdn.net/thumb/R720x0/?fname=http://t1.daumcdn.net/liveboard/dailylife/187ea4bc2ad54b1db5030743265c5397.jpg\", \r\n        gtext: [\"두리안 좋아하는사람들의 모임\"],\r\n    }], // 그룹화면에 보일 포스트들  \r\n    imagePaths:[], //미리보기 이미지경로\r\n    addPostErrorReason: false,  //포스트 업로드 실패사유\r\n    isAddingPost: false,  //포스트 업로드중\r\n    postAdded : false, //포스트 업로드 성공\r\n    isAddingComment: false,\r\n    addCommentErrorReason: '',\r\n    commentAdded: false,\r\n    addingGroupPost: false, // 그룹만들기폴더 업로드중\r\n    GroupErrorReason: '', //그룹만들기업로드 실패사유\r\n    addedGroupPost: false, // 그룹만들기폴더 업로드 성공\r\n\r\n};\r\n\r\nconst dummyPosts = {\r\n    id:2,\r\n    User: {\r\n        id: 1,\r\n        nickname: '위브',\r\n    },\r\n    content: '위브위브위브(더미포스트)',\r\n    img:\"https://img.bemypet.kr/content/2018/10/07172706/puppies-1871260_1920.jpg\", \r\n    Comments: [],\r\n};\r\n\r\nconst dummyComment = {\r\n    id:1,\r\n    User : {\r\n      id:1,\r\n      nickname:\"위브\",\r\n  },\r\n    createdAt: new Date(),\r\n    content: '위브댓글입니다(더미커멘트).',\r\n};\r\n\r\nconst dummyGroupPost = {\r\n    id:1,\r\n    User : {\r\n      id:1,\r\n      nickname:\"위브\",\r\n  },\r\n    createdAt: new Date(),\r\n    content: \"위브글입니다.(더미그룹포스트)\",\r\n};\r\n\r\n\r\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\r\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\r\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\r\n\r\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\r\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\r\n\r\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\r\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\r\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENTS_REQUEST';\r\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENTS_SUCCESS';\r\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENTS_FAILURE';\r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_GROUP_REQUEST = 'ADD_GROUP_REQUEST';\r\nexport const ADD_GROUP_SUCCESS = 'ADD_GROUP_SUCCESS';\r\nexport const ADD_GROUP_FAILURE = 'ADD_GROUP_FAILURE';\r\n\r\n// const ADD_POST = \"ADD_POST\";\r\n// const ADD_GROUPPOST = \"ADD_GROUPPOST\";\r\n// const ADD_DUMMY = \"ADD_DUMMY\";\r\n\r\n// const addPost={\r\n//     type: ADD_POST,   \r\n// };\r\n// const addGroupPost={\r\n//     type: ADD_GROUPPOST,   \r\n// };\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type){\r\n        case ADD_POST_REQUEST: {\r\n            return {\r\n                ...state, \r\n                isAddingPost: true,\r\n                addPostErrorReason: '',\r\n                postAdded: false,\r\n            };\r\n        }\r\n        case ADD_POST_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                isAddingPost: false, \r\n                mainPosts: [action.data, ...state.mainPosts],\r\n                postAdded: true, \r\n            };\r\n        }\r\n        case ADD_POST_FAILURE: {\r\n            return {\r\n                ...state,\r\n                isAddingPost: false,\r\n                addPostErrorReason : action.error,\r\n            };\r\n        }\r\n        case ADD_COMMENT_REQUEST: {\r\n            return {\r\n                ...state,\r\n                isAddingComment: true,\r\n                addCommentErrorReason: '',\r\n                commentAdded: false,\r\n            };\r\n        }\r\n        case ADD_COMMENT_SUCCESS: { \r\n            const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);//어떤게시물에 댓글을 작성할것인지\r\n            const post = state.mainPosts[postIndex];\r\n            const Comments = [...post.Comments, data.comment];\r\n            const mainPosts = [...state.mainPosts];\r\n            mainPosts[postIndex] = { ...post, Comments };\r\n            return {\r\n                ...state,\r\n                isAddingComment: false, \r\n                mainPosts,\r\n                commentAdded: true, \r\n            };\r\n        } \r\n        case ADD_COMMENT_FAILURE: {\r\n            return {\r\n                ...state,\r\n                isAddingComment: false,\r\n                addCommentErrorReason : action.error,\r\n            };\r\n        }\r\n        case LOAD_MAIN_POSTS_REQUEST: {\r\n            return {\r\n              ...state,\r\n              mainPosts: [],\r\n            };\r\n          }\r\n          case LOAD_MAIN_POSTS_SUCCESS: {\r\n            return {\r\n              ...state,\r\n              mainPosts: action.data,\r\n            };\r\n          }\r\n          case LOAD_MAIN_POSTS_FAILURE: {\r\n            return {\r\n              ...state,\r\n            };\r\n          }\r\n        //그룹만들기 업로드 \r\n        case ADD_GROUP_REQUEST: {\r\n            return {\r\n                ...state,\r\n                addingGroupPost: true,\r\n                GroupErrorReason : '',\r\n                addedGroupPost: false,\r\n            };\r\n        }\r\n        case ADD_GROUP_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                addingGroupPost: false,\r\n                GroupPosts: [dummyGroupPost, ...state.GroupPosts],\r\n                addedGroupPost: true,\r\n            };\r\n        }\r\n        case ADD_GROUP_FAILURE: {\r\n            return {\r\n                ...state,\r\n                addedGroupPost: false,\r\n                GroupErrorReason : action.error,\r\n            };\r\n        }\r\n        default: {\r\n            return{\r\n                ...state,\r\n            };\r\n        }\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}