{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uC774\\uADC0\\uC601\\\\Documents\\\\coporate\\\\weave\\\\src\\\\ch1\\\\front\\\\components\\\\ContentForm.js\";\nvar __jsx = React.createElement;\n// mode변경 test\nimport React, { useCallback, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\nimport '../components/Contents.css';\nimport Link from 'next/link';\nimport '../components/reset.css';\n\nconst ContentForm = ({\n  post\n}) => {\n  const {\n    0: comments,\n    1: setComments\n  } = useState('');\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    me\n  } = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const {\n    imagePaths,\n    postAdded,\n    mainPosts,\n    commentAdded,\n    isAddingComment\n  } = useSelector(state => state.post); // 댓글\n\n  const onChangeComment = useCallback(e => {\n    setComments(e.target.value);\n  }, []); //댓글창토글\n\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []); // 댓글올리기 사이클\n\n  const onSubmitComment = useCallback(e => {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id\n      }\n    });\n  }, [me && me.id]); // 댓글 성공시, 빈텍스트로 \n\n  useEffect(() => {\n    setComments('');\n  }, [commentAdded === true]);\n\n  const onRemoveComments = () => {\n    alert('댓글을 삭제하시겠습니까?');\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"postbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"contBox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, post.id, \" \\uB2D8\\uC758 \\uAC8C\\uC2DC\\uBB3C\"), __jsx(\"img\", {\n    style: {\n      display: \"block\",\n      margin: \"0 auto\",\n      height: \"200px\"\n    },\n    alt: \"example\",\n    src: post.img,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, post.content)), __jsx(\"div\", {\n    className: \"btnsbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, __jsx(\"button\", {\n    type: \"button\",\n    className: \"commentBtn\",\n    value: commentFormOpened,\n    onClick: onToggleComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), __jsx(\"button\", {\n    type: \"button\",\n    className: \"likeBtn\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }), __jsx(\"button\", {\n    type: \"button\",\n    className: \"removeBtn\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), commentFormOpened === true && __jsx(\"form\", {\n    className: \"commentbox\",\n    onSubmit: onSubmitComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, __jsx(\"textarea\", {\n    className: \"comment\",\n    value: comments,\n    onChange: onChangeComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), __jsx(\"button\", {\n    type: \"primary\",\n    htmlType: \"submit\",\n    className: \"combtn\",\n    loading: isAddingComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"COMMENT\")), commentFormOpened === true && __jsx(\"div\", {\n    style: {\n      display: \"inline-block\",\n      width: \"100%\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    style: {\n      marginLeft: \"10px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, commentAdded ? '댓글' + post.Comments.length : '댓글' + '0'), __jsx(\"div\", {\n    className: \"comline\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }), __jsx(\"li\", {\n    style: {\n      listStyle: \"none\",\n      display: \"block\",\n      clear: \"both\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, post.nickname, \" : \", content, __jsx(\"button\", {\n    type: \"button\",\n    className: \"remove\",\n    onClick: onRemoveComments,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"REMOVE\"))))));\n};\n\nContentForm.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string\n  })\n};\nexport default ContentForm;","map":{"version":3,"sources":["C:/Users/이귀영/Documents/coporate/weave/src/ch1/front/components/ContentForm.js"],"names":["React","useCallback","useState","useEffect","PropTypes","useSelector","useDispatch","ADD_COMMENT_REQUEST","Link","ContentForm","post","comments","setComments","commentFormOpened","setCommentFormOpened","me","state","user","dispatch","imagePaths","postAdded","mainPosts","commentAdded","isAddingComment","onChangeComment","e","target","value","onToggleComment","prev","onSubmitComment","preventDefault","alert","type","data","postId","id","onRemoveComments","display","margin","height","img","content","width","marginLeft","Comments","length","listStyle","clear","nickname","propTypes","shape","User","object","string"],"mappings":"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","sourcesContent":["// mode변경 test\r\nimport React, { useCallback, useState, useEffect }  from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\r\n\r\nimport '../components/Contents.css';\r\nimport Link from 'next/link';\r\nimport '../components/reset.css';\r\n\r\nconst ContentForm = ({post}) => {\r\n    \r\n    const [comments, setComments ] = useState('');\r\n    const [ commentFormOpened, setCommentFormOpened] = useState(false);\r\n    const { me } = useSelector(state => state.user);\r\n    const dispatch = useDispatch();\r\n\r\n    const { imagePaths, postAdded, mainPosts, commentAdded, isAddingComment } = useSelector(state => state.post);\r\n\r\n    // 댓글\r\n    const onChangeComment = useCallback((e) => {\r\n        setComments(e.target.value);\r\n    }, []);\r\n\r\n    //댓글창토글\r\n    const onToggleComment = useCallback(() => {\r\n        setCommentFormOpened(prev => !prev);\r\n      }, []);\r\n\r\n    // 댓글올리기 사이클\r\n    const onSubmitComment = useCallback((e) => {\r\n        e.preventDefault();\r\n        if(!me){\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n        return dispatch({\r\n            type: ADD_COMMENT_REQUEST,\r\n            data:{\r\n                postId: post.id,\r\n            },\r\n        });\r\n    }, [me && me.id]);\r\n    \r\n    // 댓글 성공시, 빈텍스트로 \r\n    useEffect(() => {\r\n        setComments('');\r\n    },[commentAdded === true]);\r\n\r\n    const onRemoveComments = () => {\r\n        alert('댓글을 삭제하시겠습니까?');\r\n    };\r\n\r\n    return(\r\n        <>\r\n            {/* 게시물올라갈부분 */}\r\n            {/* {mainPosts.map((v) => { */}\r\n                {/* return( */}\r\n                    <div className=\"postbox\">   \r\n                        <div className=\"contBox\">\r\n                            <p>{post.id} 님의 게시물</p>\r\n                            <img style={{display:\"block\", margin:\"0 auto\", height:\"200px\"}} alt=\"example\" src={post.img}/> \r\n                            <div>{post.content}</div>\r\n                        </div>\r\n                        <div className=\"btnsbox\">\r\n                            <button type=\"button\" className=\"commentBtn\"  value={commentFormOpened} onClick={onToggleComment} />\r\n                            <button type=\"button\" className=\"likeBtn\" /> \r\n                            <button type=\"button\" className=\"removeBtn\" />\r\n                            {commentFormOpened===true &&\r\n                                <form className=\"commentbox\" onSubmit={onSubmitComment}>\r\n                                    <textarea className=\"comment\" value={comments} onChange={onChangeComment} />\r\n                                    <button type=\"primary\" htmlType=\"submit\" className=\"combtn\" loading={isAddingComment} >COMMENT</button>\r\n                                </form>\r\n                            }\r\n                            {/* 댓글올라갈부분 */}\r\n                            {commentFormOpened===true && (\r\n                                <div style={{display:\"inline-block\", width:\"100%\"}}>\r\n                                    <p style={{marginLeft:\"10px\"}}>{commentAdded ? '댓글' + post.Comments.length : '댓글'+ '0'}</p>\r\n                                    <div className=\"comline\"></div>\r\n                                            <li style={{\r\n                                                listStyle:\"none\", display:\"block\", clear:\"both\"}}\r\n                                            >\r\n                                                {post.nickname} : {content}\r\n                                                <button type=\"button\" className=\"remove\" onClick={onRemoveComments} >REMOVE</button>\r\n                                            </li>\r\n                                    {/* { mainPosts.map((v) => {\r\n                                        return( \r\n                                            <li key={v.createdAt} style={{\r\n                                                listStyle:\"none\", display:\"block\", clear:\"both\"}}\r\n                                            >\r\n                                                {v.User.nickname} : {v.content}\r\n                                                <button type=\"button\" className=\"remove\" onClick={onRemoveComments} >REMOVE</button>\r\n                                            </li>\r\n                                        );\r\n                                    })\r\n                                    } */}\r\n                                </div>\r\n                                )\r\n                            }\r\n                        </div> \r\n                    </div>\r\n                {/* ); */}\r\n            {/* })\r\n            } */}\r\n        </>\r\n    );\r\n    \r\n\r\n};\r\n\r\nContentForm.propTypes={\r\n    post: PropTypes.shape({\r\n        User: PropTypes.object,\r\n        content: PropTypes.string,\r\n        img: PropTypes.string,\r\n    }),\r\n};\r\n\r\n\r\nexport default ContentForm;\r\n"]},"metadata":{},"sourceType":"module"}