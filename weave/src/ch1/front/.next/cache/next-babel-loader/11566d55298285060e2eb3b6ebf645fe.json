{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uC774\\uADC0\\uC601\\\\Documents\\\\coporate\\\\weave\\\\src\\\\ch1\\\\front\\\\pages\\\\contents.js\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_POST_REQUEST } from '../reducers/post';\nimport '../components/Contents.css';\nimport Menu from '../components/Menu';\n\nconst Contents = () => {\n  const dispatch = useDispatch();\n  const {\n    0: text,\n    1: setText\n  } = useState('');\n  const {\n    imagePaths,\n    isAddingPost,\n    postAdded,\n    mainPosts\n  } = useSelector(state => state.post);\n  useEffect(() => {\n    setText('');\n  }, [postAdded === true]);\n  const onSubmitForm = useCallback(e => {\n    e.preventDefault();\n    dispatch({\n      type: ADD_POST_REQUEST,\n      data: {\n        text\n      }\n    });\n  }, []);\n\n  const handleChange = event => {\n    setFile({\n      file: URL.createObjectURL(event.target.files[0])\n    });\n  };\n\n  const onChangeText = useCallback(e => {\n    setText(e.target.value); //console.log();\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(Menu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    className: \"wrap\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"groupinfo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"groupimg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    className: \"grouptext\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"\\uB315\\uB315\\uC774\\uC9D1\\uC0AC \\uADF8\\uB8F9\"), __jsx(\"p\", {\n    className: \"numMem\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Member. 43\"), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"\\uC138\\uC824\\uC608 \\uB315\\uB315\\uC774\\uB4E4 \\uBAA8\\uC5EC\\uB77C~!\"), __jsx(\"nav\", {\n    className: \"groupSubmitBtn\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, __jsx(\"button\", {\n    className: \"gjoin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"\\uAC00\\uC785\\uD558\\uAE30\"), __jsx(\"button\", {\n    className: \"gout\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"\\uADF8\\uB8F9\\uD0C8\\uD1F4\")))), __jsx(\"form\", {\n    className: \"uploadTb\",\n    encType: \"multipart/form-data\",\n    onSubmit: onSubmitForm,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"row1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    type: \"textarea\",\n    maxLength: 1500,\n    placeholder: \"\\uC18C\\uC2DD\\uC744 \\uB0A8\\uACA8\\uC8FC\\uC138\\uC694\",\n    className: \"tarea\",\n    value: text,\n    onChange: onChangeText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  })), __jsx(\"div\", {\n    className: \"row2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    Htmlfor: \"file-input\",\n    className: \"icon01\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"\\uC0AC\\uC9C4\\uC62C\\uB9AC\\uAE30\"), __jsx(\"input\", {\n    id: \"img_file\",\n    type: \"file\",\n    name: \"file\",\n    size: \"200\",\n    accept: \".jpg, .jpeg, .png\",\n    className: \"icon01\",\n    value: \"\",\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  })), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    Htmlfor: \"file-input\",\n    className: \"icon02\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), __jsx(\"input\", {\n    id: \"file-input\",\n    type: \"file\",\n    name: \"mv_file\",\n    accept: \".mp4, .wmv, .avi\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  })), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    Htmlfor: \"file-input\",\n    className: \"icon03\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), __jsx(\"input\", {\n    id: \"doc_file\",\n    type: \"file\",\n    accept: \".txt\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  })), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    Htmlfor: \"file-input\",\n    className: \"icon04\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }), __jsx(\"button\", {\n    id: \"file-input\",\n    className: \"icon04\",\n    type: \"submit\",\n    loading: isAddingPost,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  })))), __jsx(\"div\", {\n    className: \"posting\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"\\uADF8\\uB8F9\\uC5D0 \\uC7AC\\uBBF8\\uC788\\uB294 \\uC774\\uC57C\\uAE30\\uB97C \\uC368\\uBCF4\\uC138\\uC694.\", imagePaths.map(v => __jsx(\"div\", {\n    key: v,\n    style: {\n      display: \"inline-block\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, __jsx(\"img\", {\n    src: `http://localhost:3065/${v}`,\n    style: {\n      width: '200px'\n    },\n    alt: v,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, __jsx(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"\\uC81C\\uAC70\")))))));\n};\n\nexport default Contents; // {/* 그룹에 게시물이 아무것도 없을때 */}\n// <div className=\"letsbegin\">\n// 그룹에 재미있는 이야기를 써 보세요.\n// </div>\n// <button className=\"more\">더보기</button>\n// <table className=\"uploadTb\">\n//     <tbody>\n//         <tr className='row1'>\n//             <td colSpan='4'>\n//                 {/* <input type=\"textarea\" name=\"text\" placeholder=\"소식을 남겨주세요.\"></input> */}\n//                 <input type=\"textarea\" maxLength={1500} placeholder=\"소식을 남겨주세요\" value={text} onChange={onChangeText} />\n//             </td>\n//         </tr>\n//         <tr className='row2'>\n//             <td>\n//                 <label Htmlfor=\"file-input\" className=\"icon01\"></label>\n//                 <input id=\"file-input\" type=\"file\" name=\"file\" size=\"200\" accept=\".jpg, .jpeg, .png\" className=\"icon01\" />\n//                 {/* <input type=\"file\" id=\"img_file\" name=\"file\" size=\"200\" accept=\".jpg, .jpeg, .png\" className=\"icon01\"></input> */}\n//             </td>\n//             <td>\n//                 <label Htmlfor=\"file-input\" className=\"icon02\"></label>\n//                 <input id=\"file-input\" type=\"file\" name=\"file\" accept=\".mp4, .wmv, .avi\" value=\"\" />\n//                 {/* <input type=\"file\" id=\"mv_file\" name=\"file\" accept=\".mp4, .wmv, .avi\"></input> */}\n//             </td>\n//             <td>\n//                 <label Htmlfor=\"file-input\" className=\"icon03\"></label>\n//                 <input id=\"file-input\" type=\"file\" value=\"\" />\n//                 {/* <input type=\"file\" id=\"doc_file\" name=\"file\" accept=\".txt\"></input> */}\n//             </td>\n//             <td>\n//                 <label Htmlfor=\"file-input\" className=\"icon04\"></label>\n//                 <input id=\"file-input\" type=\"submit\" loading={isAddingPost} onSubmit={onSubmitForm} />\n//             </td>\n//         </tr>\n//     </tbody>\n// </table>\n// import React, { useCallback, useState, useEffect } from 'react';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { ADD_POST_REQUEST } from '../reducers/post';\n// const PostForm = () => {\n//     const dispatch = useDispatch();\n//     const [text, setText ] = useState('');\n//     const { imagePaths, isAddingPost, postAdded } = useSelector(state => state.post);\n//     useEffect(() => {\n//         setText('');\n//     },[postAdded === true]);\n//     const onSubmitForm = useCallback((e) => {\n//         e.preventDefault();\n//         dispatch({\n//             type: ADD_POST_REQUEST,\n//             data: {\n//                 text,\n//             },\n//         });\n//     }, []);\n//     const onChangeText = useCallback((e) => {\n//         setText(e.target.value);\n//     }, []);\n//     return (\n//         <form style={{ margin: '10px 0 20px'}} encType=\"multipart/form-data\" onSubmit={onSubmitForm}>\n//             <input htmlType=\"textarea\" maxLength={140} placeholder=\"소식을 남겨주세요\" value={text} onChange={onChangeText}></input>\n//             <div>\n//                 <input type=\"file\" multiple hidden></input>\n//                 <button>이미지 업로드</button>\n//                 <button style={{float:\"right\"}} htmlType=\"submit\" loading={isAddingPost}>짹짹</button>\n//             </div>\n//             <div>\n//                 {/* 반복문 */}\n//                 {imagePaths.map((v) => (\n//                         <div key={v} style={{display:\"inline-block\"}}>\n//                             <img src={`http://localhost:3065/${v}`} style={{ width:'200px'}} alt={v}></img> \n//                             <div>\n//                                 <button>제거</button>\n//                             </div>   \n//                         </div>\n//                 ))}\n//             </div>\n//         </form>\n//     );\n// };\n// export default PostForm;","map":{"version":3,"sources":["C:/Users/이귀영/Documents/coporate/weave/src/ch1/front/pages/contents.js"],"names":["React","useCallback","useState","useEffect","useSelector","useDispatch","ADD_POST_REQUEST","Menu","Contents","dispatch","text","setText","imagePaths","isAddingPost","postAdded","mainPosts","state","post","onSubmitForm","e","preventDefault","type","data","handleChange","event","setFile","file","URL","createObjectURL","target","files","onChangeText","value","map","v","display","width"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,EAAuCC,SAAvC,QAAyD,OAAzD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AAEA,OAAO,4BAAP;AACA,OAAOC,IAAP,MAAiB,oBAAjB;;AAGA,MAAMC,QAAQ,GAAG,MAAM;AACnB,QAAMC,QAAQ,GAAGJ,WAAW,EAA5B;AACA,QAAM;AAAA,OAACK,IAAD;AAAA,OAAOC;AAAP,MAAmBT,QAAQ,CAAC,EAAD,CAAjC;AACA,QAAM;AAAEU,IAAAA,UAAF;AAAcC,IAAAA,YAAd;AAA4BC,IAAAA,SAA5B;AAAuCC,IAAAA;AAAvC,MAAqDX,WAAW,CAACY,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAAtE;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,OAAO,CAAC,EAAD,CAAP;AACH,GAFQ,EAEP,CAACG,SAAS,KAAK,IAAf,CAFO,CAAT;AAIA,QAAMI,YAAY,GAAGjB,WAAW,CAAEkB,CAAD,IAAO;AACpCA,IAAAA,CAAC,CAACC,cAAF;AACAX,IAAAA,QAAQ,CAAC;AACLY,MAAAA,IAAI,EAAEf,gBADD;AAELgB,MAAAA,IAAI,EAAE;AACFZ,QAAAA;AADE;AAFD,KAAD,CAAR;AAMH,GAR+B,EAQ7B,EAR6B,CAAhC;;AAUA,QAAMa,YAAY,GAAIC,KAAD,IAAW;AAC5BC,IAAAA,OAAO,CAAC;AACNC,MAAAA,IAAI,EAACC,GAAG,CAACC,eAAJ,CAAoBJ,KAAK,CAACK,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAApB;AADC,KAAD,CAAP;AAGD,GAJH;;AAMA,QAAMC,YAAY,GAAG9B,WAAW,CAAEkB,CAAD,IAAO;AACpCR,IAAAA,OAAO,CAACQ,CAAC,CAACU,MAAF,CAASG,KAAV,CAAP,CADoC,CAEpC;AACH,GAH+B,EAG7B,EAH6B,CAAhC;AAMA,SACI,4BACI,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDADJ,EAEI;AAAG,IAAA,SAAS,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wEAHJ,EAII;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAQ,IAAA,SAAS,EAAC,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADJ,EAEI;AAAQ,IAAA,SAAS,EAAC,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAFJ,CAJJ,CAFJ,CADJ,EAcI;AAAM,IAAA,SAAS,EAAC,UAAhB;AAA2B,IAAA,OAAO,EAAC,qBAAnC;AAAyD,IAAA,QAAQ,EAAEd,YAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,IAAI,EAAC,UAAZ;AAAuB,IAAA,SAAS,EAAE,IAAlC;AAAwC,IAAA,WAAW,EAAC,mDAApD;AACO,IAAA,SAAS,EAAC,OADjB;AACyB,IAAA,KAAK,EAAER,IADhC;AACsC,IAAA,QAAQ,EAAEqB,YADhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,EAKI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,OAAO,EAAC,YAAf;AAA4B,IAAA,SAAS,EAAC,QAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCADJ,EAEI;AAAO,IAAA,EAAE,EAAC,UAAV;AAAqB,IAAA,IAAI,EAAC,MAA1B;AAAiC,IAAA,IAAI,EAAC,MAAtC;AAA6C,IAAA,IAAI,EAAC,KAAlD;AAAwD,IAAA,MAAM,EAAC,mBAA/D;AAAmF,IAAA,SAAS,EAAC,QAA7F;AAAsG,IAAA,KAAK,EAAC,EAA5G;AAA+G,IAAA,QAAQ,EAAER,YAAzH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,OAAO,EAAC,YAAf;AAA4B,IAAA,SAAS,EAAC,QAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAO,IAAA,EAAE,EAAC,YAAV;AAAuB,IAAA,IAAI,EAAC,MAA5B;AAAmC,IAAA,IAAI,EAAC,SAAxC;AAAkD,IAAA,MAAM,EAAC,kBAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CALJ,EASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,OAAO,EAAC,YAAf;AAA4B,IAAA,SAAS,EAAC,QAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAO,IAAA,EAAE,EAAC,UAAV;AAAqB,IAAA,IAAI,EAAC,MAA1B;AAAiC,IAAA,MAAM,EAAC,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CATJ,EAaI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,OAAO,EAAC,YAAf;AAA4B,IAAA,SAAS,EAAC,QAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAQ,IAAA,EAAE,EAAC,YAAX;AAAwB,IAAA,SAAS,EAAC,QAAlC;AAA2C,IAAA,IAAI,EAAC,QAAhD;AAAyD,IAAA,OAAO,EAAEV,YAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAbJ,CALJ,CAdJ,EAsCI;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uGAGKD,UAAU,CAACqB,GAAX,CAAgBC,CAAD,IACR;AAAK,IAAA,GAAG,EAAEA,CAAV;AAAa,IAAA,KAAK,EAAE;AAACC,MAAAA,OAAO,EAAC;AAAT,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,GAAG,EAAG,yBAAwBD,CAAE,EAArC;AAAwC,IAAA,KAAK,EAAE;AAAEE,MAAAA,KAAK,EAAC;AAAR,KAA/C;AAAiE,IAAA,GAAG,EAAEF,CAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,CAFJ,CADP,CAHL,CAtCJ,CAFJ,CADJ;AAwDH,CAvFD;;AAyFA,eAAe1B,QAAf,C,CAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React, { useCallback, useState, useEffect }  from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ADD_POST_REQUEST } from '../reducers/post';\r\n\r\nimport '../components/Contents.css';\r\nimport Menu from '../components/Menu';\r\n\r\n\r\nconst Contents = () => {\r\n    const dispatch = useDispatch();\r\n    const [text, setText ] = useState('');\r\n    const { imagePaths, isAddingPost, postAdded, mainPosts } = useSelector(state => state.post);\r\n    \r\n    useEffect(() => {\r\n        setText('');\r\n    },[postAdded === true]);\r\n\r\n    const onSubmitForm = useCallback((e) => {\r\n        e.preventDefault();\r\n        dispatch({\r\n            type: ADD_POST_REQUEST,\r\n            data: {\r\n                text,\r\n            },\r\n        });\r\n    }, []);\r\n\r\n    const handleChange = (event) => {\r\n        setFile({\r\n          file:URL.createObjectURL(event.target.files[0])\r\n        });\r\n      }\r\n\r\n    const onChangeText = useCallback((e) => {\r\n        setText(e.target.value);\r\n        //console.log();\r\n    }, []);\r\n\r\n    \r\n    return (\r\n        <>\r\n            <Menu />\r\n            <div className=\"wrap\">\r\n                <div className=\"groupinfo\">\r\n                    <div className=\"groupimg\"></div>\r\n                    <div className=\"grouptext\">\r\n                        <h1>댕댕이집사 그룹</h1>\r\n                        <p className=\"numMem\">Member. 43</p>\r\n                        <p>세젤예 댕댕이들 모여라~!</p>\r\n                        <nav className=\"groupSubmitBtn\">\r\n                            <button className=\"gjoin\">가입하기</button>\r\n                            <button className=\"gout\">그룹탈퇴</button>\r\n                        </nav>\r\n                    </div>\r\n                </div>\r\n                \r\n                <form className=\"uploadTb\" encType=\"multipart/form-data\" onSubmit={onSubmitForm}>\r\n                    <div className='row1'>\r\n                        <input type=\"textarea\" maxLength={1500} placeholder=\"소식을 남겨주세요\" \r\n                               className=\"tarea\" value={text} onChange={onChangeText} />\r\n                    </div>\r\n                    <div className='row2'>\r\n                        <div>\r\n                            <label Htmlfor=\"file-input\" className=\"icon01\">사진올리기</label>\r\n                            <input id=\"img_file\" type=\"file\" name=\"file\" size=\"200\" accept=\".jpg, .jpeg, .png\" className=\"icon01\" value=\"\" onChange={handleChange} />\r\n                        </div>\r\n                        <div>\r\n                            <label Htmlfor=\"file-input\" className=\"icon02\"></label>\r\n                            <input id=\"file-input\" type=\"file\" name=\"mv_file\" accept=\".mp4, .wmv, .avi\" />\r\n                        </div>\r\n                        <div>\r\n                            <label Htmlfor=\"file-input\" className=\"icon03\"></label>\r\n                            <input id=\"doc_file\" type=\"file\" accept=\".txt\" />\r\n                        </div>\r\n                        <div>\r\n                            <label Htmlfor=\"file-input\" className=\"icon04\"></label>\r\n                            <button id=\"file-input\" className=\"icon04\" type=\"submit\" loading={isAddingPost}  />\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n                <div className=\"posting\" >\r\n                    그룹에 재미있는 이야기를 써보세요. \r\n                    {/* 반복문 */}\r\n                    {imagePaths.map((v) => (\r\n                            <div key={v} style={{display:\"inline-block\"}}>\r\n                                <img src={`http://localhost:3065/${v}`} style={{ width:'200px'}} alt={v}></img> \r\n                                <div>\r\n                                    <button>제거</button>\r\n                                </div>   \r\n                            </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Contents;\r\n\r\n\r\n// {/* 그룹에 게시물이 아무것도 없을때 */}\r\n// <div className=\"letsbegin\">\r\n// 그룹에 재미있는 이야기를 써 보세요.\r\n// </div>\r\n// <button className=\"more\">더보기</button>\r\n\r\n// <table className=\"uploadTb\">\r\n//     <tbody>\r\n//         <tr className='row1'>\r\n//             <td colSpan='4'>\r\n//                 {/* <input type=\"textarea\" name=\"text\" placeholder=\"소식을 남겨주세요.\"></input> */}\r\n//                 <input type=\"textarea\" maxLength={1500} placeholder=\"소식을 남겨주세요\" value={text} onChange={onChangeText} />\r\n//             </td>\r\n//         </tr>\r\n//         <tr className='row2'>\r\n//             <td>\r\n//                 <label Htmlfor=\"file-input\" className=\"icon01\"></label>\r\n//                 <input id=\"file-input\" type=\"file\" name=\"file\" size=\"200\" accept=\".jpg, .jpeg, .png\" className=\"icon01\" />\r\n//                 {/* <input type=\"file\" id=\"img_file\" name=\"file\" size=\"200\" accept=\".jpg, .jpeg, .png\" className=\"icon01\"></input> */}\r\n//             </td>\r\n//             <td>\r\n//                 <label Htmlfor=\"file-input\" className=\"icon02\"></label>\r\n//                 <input id=\"file-input\" type=\"file\" name=\"file\" accept=\".mp4, .wmv, .avi\" value=\"\" />\r\n//                 {/* <input type=\"file\" id=\"mv_file\" name=\"file\" accept=\".mp4, .wmv, .avi\"></input> */}\r\n//             </td>\r\n//             <td>\r\n//                 <label Htmlfor=\"file-input\" className=\"icon03\"></label>\r\n//                 <input id=\"file-input\" type=\"file\" value=\"\" />\r\n//                 {/* <input type=\"file\" id=\"doc_file\" name=\"file\" accept=\".txt\"></input> */}\r\n//             </td>\r\n//             <td>\r\n//                 <label Htmlfor=\"file-input\" className=\"icon04\"></label>\r\n//                 <input id=\"file-input\" type=\"submit\" loading={isAddingPost} onSubmit={onSubmitForm} />\r\n//             </td>\r\n//         </tr>\r\n//     </tbody>\r\n// </table>\r\n\r\n\r\n\r\n// import React, { useCallback, useState, useEffect } from 'react';\r\n// import { useSelector, useDispatch } from 'react-redux';\r\n// import { ADD_POST_REQUEST } from '../reducers/post';\r\n\r\n// const PostForm = () => {\r\n//     const dispatch = useDispatch();\r\n//     const [text, setText ] = useState('');\r\n//     const { imagePaths, isAddingPost, postAdded } = useSelector(state => state.post);\r\n    \r\n//     useEffect(() => {\r\n//         setText('');\r\n//     },[postAdded === true]);\r\n\r\n//     const onSubmitForm = useCallback((e) => {\r\n//         e.preventDefault();\r\n//         dispatch({\r\n//             type: ADD_POST_REQUEST,\r\n//             data: {\r\n//                 text,\r\n//             },\r\n//         });\r\n//     }, []);\r\n    \r\n//     const onChangeText = useCallback((e) => {\r\n//         setText(e.target.value);\r\n//     }, []);\r\n    \r\n//     return (\r\n//         <form style={{ margin: '10px 0 20px'}} encType=\"multipart/form-data\" onSubmit={onSubmitForm}>\r\n//             <input htmlType=\"textarea\" maxLength={140} placeholder=\"소식을 남겨주세요\" value={text} onChange={onChangeText}></input>\r\n//             <div>\r\n//                 <input type=\"file\" multiple hidden></input>\r\n//                 <button>이미지 업로드</button>\r\n//                 <button style={{float:\"right\"}} htmlType=\"submit\" loading={isAddingPost}>짹짹</button>\r\n//             </div>\r\n//             <div>\r\n//                 {/* 반복문 */}\r\n//                 {imagePaths.map((v) => (\r\n//                         <div key={v} style={{display:\"inline-block\"}}>\r\n//                             <img src={`http://localhost:3065/${v}`} style={{ width:'200px'}} alt={v}></img> \r\n//                             <div>\r\n//                                 <button>제거</button>\r\n//                             </div>   \r\n//                         </div>\r\n//                 ))}\r\n//             </div>\r\n//         </form>\r\n//     );\r\n// };\r\n\r\n// export default PostForm;"]},"metadata":{},"sourceType":"module"}