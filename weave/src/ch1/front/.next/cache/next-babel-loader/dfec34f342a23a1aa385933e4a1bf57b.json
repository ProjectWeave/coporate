{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"위브\"\n    },\n    content: \"첫번째 게시글\",\n    img: \"http://www.redpiltong.co.kr/shopimages/redpiltong/012002000104.jpg?1547186041\",\n    Comments: []\n  }],\n  // 화면에 보일 포스트들 \n  GroupPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"위브\"\n    },\n    content: \"첫번째 게시글\",\n    img: \"https://img1.daumcdn.net/thumb/R720x0/?fname=http://t1.daumcdn.net/liveboard/dailylife/187ea4bc2ad54b1db5030743265c5397.jpg\",\n    Comments: []\n  }],\n  // 그룹화면에 보일 포스트들 \n  imagePaths: [],\n  //미리보기 이미지경로\n  addPostErrorReason: false,\n  //포스트 업로드 실패사유\n  isAddingPost: false,\n  //포스트 업로드중\n  postAdded: false,\n  //포스트 업로드 성공\n  isAddingComment: false,\n  addCommentErrorReason: '',\n  commentAdded: false,\n  addingGroupPost: false,\n  // 그룹만들기폴더 업로드중\n  GroupErrorReason: '',\n  //그룹만들기업로드 실패사유\n  addedGroupPost: false // 그룹만들기폴더 업로드 성공\n\n};\nconst dummyPosts = {\n  id: 2,\n  User: {\n    id: 1,\n    nickname: '위브'\n  },\n  content: '위브위브위브',\n  Comments: []\n};\nconst dummyComment = {\n  id: 1,\n  User: {\n    id: 1,\n    nickname: \"위브\"\n  },\n  createdAt: new Date(),\n  content: '위브댓글입니다.'\n};\nconst dummyGroupPost = {\n  id: 1,\n  User: {\n    id: 1,\n    nickname: \"위브\"\n  },\n  createdAt: new Date(),\n  content: \"위브글입니다.\"\n}; // mainPosts:[{\n//     id:1,\n//     User:{\n//         id: 1,\n//         nickname: \"위브\",\n//     },\n//     content: \"첫번째 게시글\",\n//     img:\"https://img1.daumcdn.net/thumb/R720x0/?fname=http://t1.daumcdn.net/liveboard/dailylife/187ea4bc2ad54b1db5030743265c5397.jpg\", \n//     Comments: [],\n// }], // 화면에 보일 포스트들 \n\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENTS_REQUEST';\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENTS_SUCCESS';\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENTS_FAILURE';\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_GROUP_REQUEST = 'ADD_GROUP_REQUEST';\nexport const ADD_GROUP_SUCCESS = 'ADD_GROUP_SUCCESS';\nexport const ADD_GROUP_FAILURE = 'ADD_GROUP_FAILURE';\nconst ADD_POST = \"ADD_POST\";\nconst ADD_GROUPPOST = \"ADD_GROUPPOST\";\nconst ADD_DUMMY = \"ADD_DUMMY\";\nconst addPost = {\n  type: ADD_POST\n};\nconst addGroupPost = {\n  type: ADD_GROUPPOST\n}; // const addDummy = {\n//     type: ADD_DUMMY,\n//     data:{\n//         content:'Hello',\n//         UserId: 1,\n//         User:{\n//             nickname:\"두리안\",\n//         },\n//     },\n// };\n\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          //immutable\n          isAddingPost: true,\n          addPostErrorReason: '',\n          postAdded: false\n        });\n      }\n\n    case ADD_POST_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isAddingPost: false,\n          GroupPosts: [dummyPosts, ...state.mainPosts],\n          postAdded: true\n        });\n      }\n\n    case ADD_POST_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isAddingPost: false,\n          addPostErrorReason: action.error\n        });\n      }\n\n    case ADD_COMMENT_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          //immutable\n          isAddingComment: true,\n          addCommentErrorReason: '',\n          commentAdded: false\n        });\n      }\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        //immutable\n        const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n        const post = state.mainPosts[postIndex];\n        const Comments = [...post.Comments, dummyComment];\n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = _objectSpread({}, post, {\n          Comments\n        });\n        return _objectSpread({}, state, {\n          isAddingComment: false,\n          mainPosts,\n          commentAdded: true\n        });\n      }\n\n    case ADD_COMMENT_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isAddingComment: false,\n          addCommentErrorReason: action.error\n        });\n      }\n    //그룹만들기 업로드 \n\n    case ADD_GROUP_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          addingGroupPost: true,\n          GroupErrorReason: '',\n          addedGroupPost: false\n        });\n      }\n\n    case ADD_GROUP_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          addingGroupPost: false,\n          mainPosts: [dummyGroupPost, ...state.GroupPosts],\n          addedGroupPost: true\n        });\n      }\n\n    case ADD_GROUP_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          addedGroupPost: false,\n          GroupErrorReason: action.error\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n});","map":{"version":3,"sources":["C:/Users/이귀영/Documents/coporate/weave/src/ch1/front/reducers/post.js"],"names":["initialState","mainPosts","id","User","nickname","content","img","Comments","GroupPosts","imagePaths","addPostErrorReason","isAddingPost","postAdded","isAddingComment","addCommentErrorReason","commentAdded","addingGroupPost","GroupErrorReason","addedGroupPost","dummyPosts","dummyComment","createdAt","Date","dummyGroupPost","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","REMOVE_IMAGE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_GROUP_REQUEST","ADD_GROUP_SUCCESS","ADD_GROUP_FAILURE","ADD_POST","ADD_GROUPPOST","ADD_DUMMY","addPost","type","addGroupPost","state","action","error","postIndex","findIndex","v","data","postId","post"],"mappings":"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","sourcesContent":["export const initialState={\r\n    mainPosts:[{\r\n        id:1,\r\n        User:{\r\n            id: 1,\r\n            nickname: \"위브\",\r\n        },\r\n        content: \"첫번째 게시글\",\r\n        img:\"http://www.redpiltong.co.kr/shopimages/redpiltong/012002000104.jpg?1547186041\", \r\n        Comments: [],\r\n    }], // 화면에 보일 포스트들 \r\n    GroupPosts:[{\r\n        id:1,\r\n        User:{\r\n            id: 1,\r\n            nickname: \"위브\",\r\n        },\r\n        content: \"첫번째 게시글\",\r\n        img:\"https://img1.daumcdn.net/thumb/R720x0/?fname=http://t1.daumcdn.net/liveboard/dailylife/187ea4bc2ad54b1db5030743265c5397.jpg\", \r\n        Comments: [],\r\n    }], // 그룹화면에 보일 포스트들 \r\n    imagePaths:[], //미리보기 이미지경로\r\n    addPostErrorReason: false,  //포스트 업로드 실패사유\r\n    isAddingPost: false,  //포스트 업로드중\r\n    postAdded : false, //포스트 업로드 성공\r\n    isAddingComment: false,\r\n    addCommentErrorReason: '',\r\n    commentAdded: false,\r\n    addingGroupPost: false, // 그룹만들기폴더 업로드중\r\n    GroupErrorReason: '', //그룹만들기업로드 실패사유\r\n    addedGroupPost: false, // 그룹만들기폴더 업로드 성공\r\n\r\n};\r\n\r\nconst dummyPosts = {\r\n    id:2,\r\n    User: {\r\n        id: 1,\r\n        nickname: '위브',\r\n    },\r\n    content: '위브위브위브',\r\n    Comments: [],\r\n};\r\n\r\nconst dummyComment = {\r\n    id:1,\r\n    User : {\r\n      id:1,\r\n      nickname:\"위브\",\r\n  },\r\n    createdAt: new Date(),\r\n    content: '위브댓글입니다.',\r\n};\r\n\r\nconst dummyGroupPost = {\r\n    id:1,\r\n    User : {\r\n      id:1,\r\n      nickname:\"위브\",\r\n  },\r\n    createdAt: new Date(),\r\n    content: \"위브글입니다.\",\r\n};\r\n\r\n// mainPosts:[{\r\n//     id:1,\r\n//     User:{\r\n//         id: 1,\r\n//         nickname: \"위브\",\r\n//     },\r\n//     content: \"첫번째 게시글\",\r\n//     img:\"https://img1.daumcdn.net/thumb/R720x0/?fname=http://t1.daumcdn.net/liveboard/dailylife/187ea4bc2ad54b1db5030743265c5397.jpg\", \r\n//     Comments: [],\r\n// }], // 화면에 보일 포스트들 \r\n\r\n\r\n\r\nexport const LOAD_MAIN_POSTS_REQUEST = 'LOAD_MAIN_POSTS_REQUEST';\r\nexport const LOAD_MAIN_POSTS_SUCCESS = 'LOAD_MAIN_POSTS_SUCCESS';\r\nexport const LOAD_MAIN_POSTS_FAILURE = 'LOAD_MAIN_POSTS_FAILURE';\r\n\r\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\r\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\r\n\r\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\r\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\r\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const LOAD_COMMENTS_REQUEST = 'LOAD_COMMENTS_REQUEST';\r\nexport const LOAD_COMMENTS_SUCCESS = 'LOAD_COMMENTS_SUCCESS';\r\nexport const LOAD_COMMENTS_FAILURE = 'LOAD_COMMENTS_FAILURE';\r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_GROUP_REQUEST = 'ADD_GROUP_REQUEST';\r\nexport const ADD_GROUP_SUCCESS = 'ADD_GROUP_SUCCESS';\r\nexport const ADD_GROUP_FAILURE = 'ADD_GROUP_FAILURE';\r\n\r\nconst ADD_POST = \"ADD_POST\";\r\nconst ADD_GROUPPOST = \"ADD_GROUPPOST\";\r\nconst ADD_DUMMY = \"ADD_DUMMY\";\r\n\r\nconst addPost={\r\n    type: ADD_POST,   \r\n};\r\nconst addGroupPost={\r\n    type: ADD_GROUPPOST,   \r\n};\r\n\r\n// const addDummy = {\r\n//     type: ADD_DUMMY,\r\n//     data:{\r\n//         content:'Hello',\r\n//         UserId: 1,\r\n//         User:{\r\n//             nickname:\"두리안\",\r\n//         },\r\n//     },\r\n// };\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type){\r\n        case ADD_POST_REQUEST: {\r\n            return {\r\n                ...state, //immutable\r\n                isAddingPost: true,\r\n                addPostErrorReason: '',\r\n                postAdded: false,\r\n            };\r\n        }\r\n        case ADD_POST_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                isAddingPost: false, \r\n                GroupPosts: [dummyPosts, ...state.mainPosts],\r\n                postAdded: true, \r\n            };\r\n        }\r\n        case ADD_POST_FAILURE: {\r\n            return {\r\n                ...state,\r\n                isAddingPost: false,\r\n                addPostErrorReason : action.error,\r\n            };\r\n        }\r\n        case ADD_COMMENT_REQUEST: {\r\n            return {\r\n                ...state, //immutable\r\n                isAddingComment: true,\r\n                addCommentErrorReason: '',\r\n                commentAdded: false,\r\n            };\r\n        }\r\n        case ADD_COMMENT_SUCCESS: { //immutable\r\n            const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\r\n            const post = state.mainPosts[postIndex];\r\n            const Comments = [...post.Comments, dummyComment];\r\n            const mainPosts = [...state.mainPosts];\r\n            mainPosts[postIndex] = { ...post, Comments };\r\n            return {\r\n                ...state,\r\n                isAddingComment: false, \r\n                mainPosts,\r\n                commentAdded: true, \r\n            };\r\n        } \r\n        case ADD_COMMENT_FAILURE: {\r\n            return {\r\n                ...state,\r\n                isAddingComment: false,\r\n                addCommentErrorReason : action.error,\r\n            };\r\n        }\r\n        //그룹만들기 업로드 \r\n        case ADD_GROUP_REQUEST: {\r\n            return {\r\n                ...state,\r\n                addingGroupPost: true,\r\n                GroupErrorReason : '',\r\n                addedGroupPost: false,\r\n            };\r\n        }\r\n        case ADD_GROUP_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                addingGroupPost: false,\r\n                mainPosts: [dummyGroupPost, ...state.GroupPosts],\r\n                addedGroupPost: true,\r\n            };\r\n        }\r\n        case ADD_GROUP_FAILURE: {\r\n            return {\r\n                ...state,\r\n                addedGroupPost: false,\r\n                GroupErrorReason : action.error,\r\n            };\r\n        }\r\n        default: {\r\n            return{\r\n                ...state,\r\n            };\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}