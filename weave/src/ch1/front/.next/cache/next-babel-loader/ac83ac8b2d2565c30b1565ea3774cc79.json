{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uC774\\uADC0\\uC601\\\\Documents\\\\coporate\\\\weave\\\\src\\\\ch1\\\\front\\\\components\\\\ContentForm.js\";\nvar __jsx = React.createElement;\n// mode변경 test\nimport React, { useCallback, useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST } from '../reducers/post';\nimport '../components/Contents.css';\nimport Link from 'next/link';\nimport '../components/reset.css';\n\nconst ContentForm = () => {\n  const {\n    imagePaths,\n    mainPosts,\n    GroupPosts,\n    commentAdded,\n    isAddingComment,\n    postAdded\n  } = useSelector(state => state.post);\n  const {\n    0: comments,\n    1: setComments\n  } = useState('');\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false); // 댓글\n\n  const onChangeComment = useCallback(e => {\n    setComments(e.target.value);\n  }, []); //댓글창나오게\n\n  const onInputComment = e => {\n    e.preventDefault();\n    document.querySelector(\".commentbox\").style.display = \"block\";\n  };\n\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []); // 댓글올리기 사이클\n\n  const onSubmitComment = useCallback(e => {\n    e.preventDefault();\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        text\n      }\n    });\n  }, []);\n  useEffect(() => {\n    setComments('');\n  }, [commentAdded === true]);\n  if (postAdded === false) return __jsx(\"div\", {\n    className: \"letsbegin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"startT\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"\\uADF8\\uB8F9\\uC5D0 \\uC7AC\\uBBF8\\uC788\\uB294 \\uC774\\uC57C\\uAE30\\uB97C \\uC368\\uBCF4\\uC138\\uC694.\"));\n  if (postAdded === true) return __jsx(\"div\", {\n    className: \"letsbegin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, GroupPosts.map(v => {\n    return __jsx(\"div\", {\n      key: v,\n      className: \"postbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"contBox\",\n      post: v,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      className: \"btnsbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, __jsx(\"button\", {\n      type: \"button\",\n      className: \"commentBtn\",\n      value: commentFormOpened,\n      onClick: onToggleComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), __jsx(\"button\", {\n      type: \"button\",\n      className: \"likeBtn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), __jsx(\"button\", {\n      type: \"button\",\n      className: \"removeBtn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), __jsx(\"form\", {\n      className: \"commentbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, __jsx(\"input\", {\n      type: \"textarea\",\n      resize: \"none\",\n      className: \"comment\",\n      value: comments,\n      onChange: onChangeComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), __jsx(\"button\", {\n      type: \"submit\",\n      className: \"combtn\",\n      onClick: onSubmitComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"COMMENT\"))));\n  }));\n};\n\nexport default ContentForm;","map":{"version":3,"sources":["C:/Users/이귀영/Documents/coporate/weave/src/ch1/front/components/ContentForm.js"],"names":["React","useCallback","useState","useEffect","useSelector","useDispatch","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","Link","ContentForm","imagePaths","mainPosts","GroupPosts","commentAdded","isAddingComment","postAdded","state","post","comments","setComments","commentFormOpened","setCommentFormOpened","onChangeComment","e","target","value","onInputComment","preventDefault","document","querySelector","style","display","onToggleComment","prev","onSubmitComment","dispatch","type","data","text","map","v"],"mappings":"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","sourcesContent":["// mode변경 test\r\nimport React, { useCallback, useState, useEffect }  from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST } from '../reducers/post';\r\n\r\nimport '../components/Contents.css';\r\nimport Link from 'next/link';\r\nimport '../components/reset.css';\r\n\r\nconst ContentForm = () => {\r\n    const { imagePaths, mainPosts, GroupPosts, commentAdded, isAddingComment, postAdded } = useSelector(state => state.post);\r\n    const [comments, setComments ] = useState('');\r\n    const [ commentFormOpened, setCommentFormOpened] = useState(false);\r\n    // 댓글\r\n    const onChangeComment = useCallback((e) => {\r\n        setComments(e.target.value);\r\n    }, []);\r\n\r\n    //댓글창나오게\r\n    const onInputComment = (e) => {\r\n        e.preventDefault();\r\n        document.querySelector(\".commentbox\").style.display=\"block\";\r\n    };\r\n    const onToggleComment = useCallback(() => {\r\n        setCommentFormOpened(prev => !prev);\r\n      }, []);\r\n    // 댓글올리기 사이클\r\n    const onSubmitComment = useCallback((e) => {\r\n        e.preventDefault();\r\n        dispatch({\r\n            type: ADD_COMMENT_REQUEST,\r\n            data: {\r\n                text,\r\n            },\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setComments('');\r\n    },[commentAdded === true]);\r\n\r\n    if(postAdded===false)\r\n    return(\r\n        <div className=\"letsbegin\" >\r\n            <div className=\"startT\">그룹에 재미있는 이야기를 써보세요.</div>\r\n        </div>\r\n    );\r\n    if(postAdded===true)\r\n    return(\r\n        <div className=\"letsbegin\" >\r\n            {/* 게시물올라갈부분 */}\r\n            {GroupPosts.map((v) => {\r\n                return(\r\n                    <div key={v} className=\"postbox\">\r\n                        <div className=\"contBox\" post={v}>\r\n                            {/* <img alt=\"example\" src={post.img}/>  */}\r\n                            {/* {imagePaths.map((c) => (\r\n                                <div key={c} style={{display:\"inline-block\"}}>\r\n                                    <img src={`http://localhost:3065/${c}`} style={{ width:'200px'}} alt={c}></img> \r\n                                    <div>\r\n                                        <button>제거</button>\r\n                                    </div>   \r\n                                </div>\r\n                            ))} */}\r\n                        </div>\r\n                        <div className=\"btnsbox\">\r\n                            <button type=\"button\" className=\"commentBtn\"  value={commentFormOpened} onClick={onToggleComment} />\r\n                            <button type=\"button\" className=\"likeBtn\" /> \r\n                            <button type=\"button\" className=\"removeBtn\" />\r\n                            <form className=\"commentbox\">\r\n                                <input type=\"textarea\" resize=\"none\" className=\"comment\" value={comments} onChange={onChangeComment} />\r\n                                <button type=\"submit\" className=\"combtn\" onClick={onSubmitComment}>COMMENT</button>\r\n                            </form>\r\n                            {/* 댓글올라갈부분 */}\r\n                            {/* {mainPosts.map((c) => (\r\n                                <div key={c} style={{display:\"inline-block\"}}>\r\n                                    <div>\r\n                                        <button type=\"button\" className=\"remove\">REMOVE</button>\r\n                                    </div>   \r\n                                </div>\r\n                            ))} */}\r\n                        </div> \r\n                    </div>\r\n                );\r\n            })\r\n            }\r\n        </div>\r\n    );\r\n    \r\n\r\n};\r\nexport default ContentForm;\r\n    \r\n        \r\n        \r\n        "]},"metadata":{},"sourceType":"module"}