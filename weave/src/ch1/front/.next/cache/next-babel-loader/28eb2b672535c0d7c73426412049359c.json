{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uC774\\uADC0\\uC601\\\\Documents\\\\coporate\\\\weave\\\\src\\\\ch1\\\\front\\\\components\\\\ContentForm.js\";\nvar __jsx = React.createElement;\n// mode변경 test\nimport React, { useCallback, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\nimport '../components/Contents.css';\nimport Link from 'next/link';\nimport '../components/reset.css';\n\nconst ContentForm = ({\n  post\n}) => {\n  const {\n    0: comments,\n    1: setComments\n  } = useState('');\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    me\n  } = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const {\n    imagePaths,\n    postAdded,\n    mainPosts,\n    GroupPosts,\n    commentAdded,\n    isAddingComment\n  } = useSelector(state => state.post); // 댓글\n\n  const onChangeComment = useCallback(e => {\n    setComments(e.target.value);\n  }, []); //댓글창토글\n\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []); // 댓글올리기 사이클\n  // const onSubmitComment = useCallback((e) => {\n  //     e.preventDefault();\n  //     dispatch({\n  //         type: ADD_COMMENT_REQUEST,\n  //         data: {\n  //             text,\n  //         },\n  //     });\n  // }, []);\n\n  const onSubmitComment = useCallback(e => {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {}\n    });\n  }, [me && me.id]); // 댓글 성공시, 빈텍스트로 \n\n  useEffect(() => {\n    setComments('');\n  }, [commentAdded === true]);\n\n  const onRemoveComments = () => {\n    alert('댓글을 삭제하시겠습니까?');\n  }; // if(postAdded===false)\n  // return(\n  //     <div className=\"letsbegin\" >\n  //         <div className=\"startT\">그룹에 재미있는 이야기를 써보세요.</div>\n  //     </div>\n  // );\n  // if(postAdded===true)\n\n\n  return __jsx(React.Fragment, null, mainPosts.map(v => {\n    return __jsx(\"div\", {\n      key: v,\n      className: \"postbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"contBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, imagePaths.map(c => __jsx(\"div\", {\n      key: c,\n      style: {\n        display: \"inline-block\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, __jsx(\"img\", {\n      src: \"http://localhost:3000/\".concat(c),\n      alt: c,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, __jsx(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"\\uC81C\\uAC70\"))))), __jsx(\"div\", {\n      className: \"btnsbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, __jsx(\"button\", {\n      type: \"button\",\n      className: \"commentBtn\",\n      value: commentFormOpened,\n      onClick: onToggleComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), __jsx(\"button\", {\n      type: \"button\",\n      className: \"likeBtn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), __jsx(\"button\", {\n      type: \"button\",\n      className: \"removeBtn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), commentFormOpened === true && __jsx(\"form\", {\n      className: \"commentbox\",\n      onSubmit: onSubmitComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, __jsx(\"textarea\", {\n      className: \"comment\",\n      value: comments,\n      onChange: onChangeComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), __jsx(\"button\", {\n      type: \"primary\",\n      htmlType: \"submit\",\n      className: \"combtn\",\n      loading: isAddingComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"COMMENT\")), commentFormOpened === true && __jsx(\"div\", {\n      style: {\n        display: \"inline-block\",\n        width: \"100%\",\n        height: \"100px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      style: {\n        marginLeft: \"10px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, commentAdded ? '댓글' + post.Comments.length : '댓글' + ' 0'), __jsx(\"div\", {\n      className: \"comline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), mainPosts.map(v => {\n      return __jsx(\"li\", {\n        key: v.createdAt,\n        style: {\n          listStyle: \"none\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, v.User.nickname, \" : \", v.content, __jsx(\"button\", {\n        type: \"button\",\n        className: \"remove\",\n        onClick: onRemoveComments,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"REMOVE\"));\n    }))));\n  }));\n};\n\nContentForm.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.object\n  })\n};\nexport default ContentForm;","map":{"version":3,"sources":["C:/Users/이귀영/Documents/coporate/weave/src/ch1/front/components/ContentForm.js"],"names":["React","useCallback","useState","useEffect","PropTypes","useSelector","useDispatch","ADD_COMMENT_REQUEST","Link","ContentForm","post","comments","setComments","commentFormOpened","setCommentFormOpened","me","state","user","dispatch","imagePaths","postAdded","mainPosts","GroupPosts","commentAdded","isAddingComment","onChangeComment","e","target","value","onToggleComment","prev","onSubmitComment","preventDefault","alert","type","data","id","onRemoveComments","map","v","c","display","width","height","marginLeft","Comments","length","createdAt","listStyle","User","nickname","content","propTypes","shape","object","string","img"],"mappings":"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","sourcesContent":["// mode변경 test\r\nimport React, { useCallback, useState, useEffect }  from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\r\n\r\nimport '../components/Contents.css';\r\nimport Link from 'next/link';\r\nimport '../components/reset.css';\r\n\r\nconst ContentForm = ({post}) => {\r\n    \r\n    const [comments, setComments ] = useState('');\r\n    const [ commentFormOpened, setCommentFormOpened] = useState(false);\r\n    const { me } = useSelector(state => state.user);\r\n    const dispatch = useDispatch();\r\n\r\n    const { imagePaths, postAdded, mainPosts, GroupPosts, commentAdded, isAddingComment } = useSelector(state => state.post);\r\n\r\n    // 댓글\r\n    const onChangeComment = useCallback((e) => {\r\n        setComments(e.target.value);\r\n    }, []);\r\n\r\n    //댓글창토글\r\n    const onToggleComment = useCallback(() => {\r\n        setCommentFormOpened(prev => !prev);\r\n      }, []);\r\n\r\n    // 댓글올리기 사이클\r\n    // const onSubmitComment = useCallback((e) => {\r\n    //     e.preventDefault();\r\n    //     dispatch({\r\n    //         type: ADD_COMMENT_REQUEST,\r\n    //         data: {\r\n    //             text,\r\n    //         },\r\n    //     });\r\n    // }, []);\r\n    const onSubmitComment = useCallback((e) => {\r\n        e.preventDefault();\r\n        if(!me){\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n        return dispatch({\r\n            type: ADD_COMMENT_REQUEST,\r\n            data:{\r\n\r\n            },\r\n        });\r\n    }, [me && me.id]);\r\n    \r\n    // 댓글 성공시, 빈텍스트로 \r\n    useEffect(() => {\r\n        setComments('');\r\n    },[commentAdded === true]);\r\n\r\n    const onRemoveComments = () => {\r\n        alert('댓글을 삭제하시겠습니까?');\r\n    };\r\n\r\n\r\n    // if(postAdded===false)\r\n    // return(\r\n    //     <div className=\"letsbegin\" >\r\n    //         <div className=\"startT\">그룹에 재미있는 이야기를 써보세요.</div>\r\n    //     </div>\r\n    // );\r\n    // if(postAdded===true)\r\n    return(\r\n        <>\r\n            {/* 게시물올라갈부분 */}\r\n            {mainPosts.map((v) => {\r\n                return(\r\n                    <div key={v} className=\"postbox\">\r\n                        <div className=\"contBox\">\r\n                            {/* <img alt=\"example\" src={post.img}/>  */}\r\n                            {imagePaths.map((c) => (\r\n                                <div key={c} style={{display:\"inline-block\"}}>\r\n                                    <img src={`http://localhost:3000/${c}`} alt={c}></img> \r\n                                    <div>\r\n                                        <button>제거</button>\r\n                                    </div>   \r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"btnsbox\">\r\n                            <button type=\"button\" className=\"commentBtn\"  value={commentFormOpened} onClick={onToggleComment} />\r\n                            <button type=\"button\" className=\"likeBtn\" /> \r\n                            <button type=\"button\" className=\"removeBtn\" />\r\n                            {commentFormOpened===true &&\r\n                                <form className=\"commentbox\" onSubmit={onSubmitComment}>\r\n                                    <textarea className=\"comment\" value={comments} onChange={onChangeComment} />\r\n                                    <button type=\"primary\" htmlType=\"submit\" className=\"combtn\" loading={isAddingComment} >COMMENT</button>\r\n                                </form>\r\n                            }\r\n                            {/* 댓글올라갈부분 */}\r\n                            {commentFormOpened===true && \r\n                                <div style={{display:\"inline-block\",width:\"100%\",height:\"100px\"}}>\r\n                                    {/* <p>{post.Comments ? post.Comments.length + '댓글' : 0 + '댓글'}</p> */}\r\n                                    <p style={{marginLeft:\"10px\"}}>{commentAdded ? '댓글' + post.Comments.length : '댓글'+' 0'}</p>\r\n                                    <div className=\"comline\"></div>\r\n                                    { mainPosts.map((v) => {\r\n                                        return( \r\n                                            <li key={v.createdAt} style={{listStyle:\"none\"}}>\r\n                                                {v.User.nickname} : {v.content}\r\n                                                <button type=\"button\" className=\"remove\" onClick={onRemoveComments} >REMOVE</button>\r\n                                            </li>\r\n                                        );\r\n                                    })\r\n                                    }\r\n                                </div>\r\n                            }\r\n                        </div> \r\n                    </div>\r\n                );\r\n            })\r\n            }\r\n        </>\r\n    );\r\n    \r\n\r\n};\r\n\r\nContentForm.propTypes={\r\n    post: PropTypes.shape({\r\n        User: PropTypes.object,\r\n        content: PropTypes.string,\r\n        img: PropTypes.string,\r\n        createdAt: PropTypes.object,\r\n    }),\r\n};\r\n\r\n\r\nexport default ContentForm;\r\n"]},"metadata":{},"sourceType":"module"}