{"ast":null,"code":"import { all, fork, call, put, takeEvery } from 'redux-saga/effects';\nimport axios from \"axios\";\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE } from \"../reducers/user\"; // axios.defaults.baseURL = 'http://localhost:3065/api';\n// 로그인 하기\n\nfunction loginAPI(loginData) {\n  //서버에 요청을 보내는 부분\n  return axios.post('/user/login', loginData, {\n    withCredentials: true\n  });\n}\n\nfunction* login(action) {\n  try {\n    const result = yield call(loginAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, login);\n} // 회원가입하기\n\n\nfunction signUpAPI(signUpData) {\n  //서버에 요청을 보내는 부분\n  return axios.post('/user/', signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    // yield fork(logger);  // logger는 내기록을 로깅하는 함수,\n    // yield delay(2000);\n    yield call(signUpAPI, action.data);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    // 회원가입 실패시\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n} // 로그아웃하기\n\n\nfunction logOutAPI() {\n  //서버에 요청을 보내는 부분\n  return axios.post('/user/logout', {}, {\n    withCredentials: true\n  });\n}\n\nfunction* logout() {\n  try {\n    // yield delay(1000);\n    yield call(logOutAPI);\n    yield put({\n      // put은 dispatch와 동일\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    // 로그아웃 실패시\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogout() {\n  yield takeEvery(LOG_OUT_REQUEST, logout);\n} // 로그인한 유저 로드하기\n\n\nfunction loadUserAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.get('/user/', {\n    withCredentials: true\n  });\n}\n\nfunction* loadUser() {\n  try {\n    // yield call(loadUserAPI);\n    const result = yield call(loadUserAPI);\n    yield put({\n      type: LOAD_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loadUserAPI 실패시\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchSignUp), //순서의미없음\n  fork(watchLoadUser), fork(watchLogout)]);\n} /// call은 동기호출, 순서있음\n/// fork는 비동기호출, 순서없음\n/// take : 해당액션이 dispatch 되면 제너레이터를 next(재게)하게한다\n/// yield : 제너레이터함수에서 중단하는 역할","map":{"version":3,"sources":["C:/Users/이귀영/Documents/coporate/weave/src/ch1/front/sagas/user.js"],"names":["all","fork","call","put","takeEvery","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_FAILURE","SIGN_UP_SUCCESS","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","loginAPI","loginData","post","withCredentials","login","action","result","data","type","e","console","error","watchLogin","signUpAPI","signUpData","signUp","watchSignUp","logOutAPI","logout","watchLogout","loadUserAPI","get","loadUser","watchLoadUser","userSaga"],"mappings":"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","sourcesContent":["import { all, fork, call, put, takeEvery } from 'redux-saga/effects';\r\nimport axios from \"axios\";\r\nimport { \r\n    LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, \r\n    SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS, \r\n    LOG_OUT_REQUEST,LOG_OUT_SUCCESS, LOG_OUT_FAILURE,\r\n    LOAD_USER_REQUEST,LOAD_USER_SUCCESS,LOAD_USER_FAILURE\r\n} from \"../reducers/user\";\r\n\r\n// axios.defaults.baseURL = 'http://localhost:3065/api';\r\n\r\n// 로그인 하기\r\nfunction loginAPI(loginData){\r\n    //서버에 요청을 보내는 부분\r\n    return axios.post('/user/login', loginData, {\r\n        withCredentials: true,\r\n    });\r\n}\r\nfunction* login(action) {\r\n    try {\r\n      const result = yield call(loginAPI, action.data);\r\n      yield put({ // put은 dispatch 동일\r\n        type: LOG_IN_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) { // loginAPI 실패\r\n      console.error(e);\r\n      yield put({\r\n        type: LOG_IN_FAILURE,\r\n      });\r\n    }\r\n  }\r\nfunction* watchLogin(){\r\n    yield takeEvery(LOG_IN_REQUEST, login);\r\n}\r\n\r\n// 회원가입하기\r\nfunction signUpAPI(signUpData){\r\n    //서버에 요청을 보내는 부분\r\n    return axios.post('/user/', signUpData);\r\n}\r\nfunction* signUp(action){\r\n    try {\r\n        // yield fork(logger);  // logger는 내기록을 로깅하는 함수,\r\n        // yield delay(2000);\r\n        yield call(signUpAPI, action.data);\r\n        yield put({ \r\n            type: SIGN_UP_SUCCESS,\r\n        });\r\n    } catch (e) { // 회원가입 실패시\r\n        console.error(e);\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n            error: e\r\n        });\r\n    }\r\n}\r\nfunction* watchSignUp(){\r\n    yield takeEvery(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\n\r\n// 로그아웃하기\r\nfunction logOutAPI(){\r\n    //서버에 요청을 보내는 부분\r\n    return axios.post('/user/logout', {}, {\r\n        withCredentials: true,\r\n    });\r\n}\r\nfunction* logout(){\r\n    try {\r\n        // yield delay(1000);\r\n        yield call(logOutAPI);\r\n        yield put({ // put은 dispatch와 동일\r\n            type: LOG_OUT_SUCCESS,\r\n        });\r\n    } catch (e) { // 로그아웃 실패시\r\n        console.error(e);\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\nfunction* watchLogout(){\r\n    yield takeEvery(LOG_OUT_REQUEST, logout);\r\n}\r\n\r\n// 로그인한 유저 로드하기\r\nfunction loadUserAPI() {\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.get('/user/', {\r\n      withCredentials: true,\r\n    });\r\n}  \r\nfunction* loadUser() {\r\n    try {\r\n      // yield call(loadUserAPI);\r\n      const result = yield call(loadUserAPI);\r\n      yield put({\r\n        type: LOAD_USER_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) { // loadUserAPI 실패시\r\n      console.error(e);\r\n      yield put({\r\n        type: LOAD_USER_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n}\r\nfunction* watchLoadUser() {\r\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\r\n}\r\n\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchSignUp), //순서의미없음\r\n        fork(watchLoadUser),\r\n        fork(watchLogout),\r\n        \r\n    ]);\r\n}\r\n\r\n/// call은 동기호출, 순서있음\r\n/// fork는 비동기호출, 순서없음\r\n/// take : 해당액션이 dispatch 되면 제너레이터를 next(재게)하게한다\r\n/// yield : 제너레이터함수에서 중단하는 역할\r\n"]},"metadata":{},"sourceType":"module"}