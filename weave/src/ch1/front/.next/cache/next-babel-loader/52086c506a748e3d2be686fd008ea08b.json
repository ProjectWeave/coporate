{"ast":null,"code":"import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\nimport axios from \"axios\";\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE } from \"../reducers/user\"; // axios.defaults.baseURL = 'http://localhost:3065/api';\n\nfunction loginAPI(loginData) {\n  //서버에 요청을 보내는 부분\n  return axios.post('/login', loginData);\n}\n\nfunction* login() {\n  try {\n    // yield fork(logger);  // logger는 내기록을 로깅하는 함수,\n    yield delay(1000);\n    yield put({\n      // put은 dispatch와 동일\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    // 로그인 실패시\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, login);\n}\n\nfunction signUpAPI(signUpData) {\n  //서버에 요청을 보내는 부분\n  return axios.post('http://localhost:3065/api/user/login', signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    // yield fork(logger);  // logger는 내기록을 로깅하는 함수,\n    // yield delay(2000);\n    yield call(signUpAPI, action.data);\n    yield put({\n      // put은 dispatch와 동일\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    // 로그인 실패시\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction logoutAPI() {\n  //서버에 요청을 보내는 부분\n  return axios.post('/login');\n}\n\nfunction* logout() {\n  try {\n    yield delay(1000);\n    yield put({\n      // put은 dispatch와 동일\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    // 로그아웃 실패시\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE\n    });\n  }\n}\n\nfunction* watchLogout() {\n  yield takeEvery(LOG_OUT_REQUEST, logout);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchSignUp), //순서의미없음\n  fork(watchLogout)]);\n} /// call은 동기호출, 순서있음\n/// fork는 비동기호출, 순서없음\n/// take : 해당액션이 dispatch 되면 제너레이터를 next(재게)하게한다\n/// yield : 제너레이터함수에서 중단하는 역할","map":{"version":3,"sources":["C:/Users/이귀영/Documents/coporate/weave/src/ch1/front/sagas/user.js"],"names":["all","fork","takeLatest","takeEvery","call","put","take","delay","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_FAILURE","SIGN_UP_SUCCESS","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","loginAPI","loginData","post","login","type","e","console","error","watchLogin","signUpAPI","signUpData","signUp","action","data","watchSignUp","logoutAPI","logout","watchLogout","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,SAAhC,EAA2CC,IAA3C,EAAiDC,GAAjD,EAAsDC,IAAtD,EAA4DC,KAA5D,QAAyE,oBAAzE;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,cAAzC,EAAyDC,eAAzD,EAA0EC,eAA1E,EAA2FC,eAA3F,EAA4GC,eAA5G,EAA4HC,eAA5H,EAA6IC,eAA7I,QAAoK,kBAApK,C,CAEA;;AAEA,SAASC,QAAT,CAAkBC,SAAlB,EAA4B;AACxB;AACA,SAAOX,KAAK,CAACY,IAAN,CAAW,QAAX,EAAqBD,SAArB,CAAP;AACH;;AAED,UAAUE,KAAV,GAAiB;AACb,MAAI;AACA;AACA,UAAMd,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AAAE;AACRiB,MAAAA,IAAI,EAAEZ;AADA,KAAD,CAAT;AAGH,GAND,CAME,OAAOa,CAAP,EAAU;AAAE;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMlB,GAAG,CAAC;AACNiB,MAAAA,IAAI,EAAEX;AADA,KAAD,CAAT;AAGH;AACJ;;AAED,UAAUe,UAAV,GAAsB;AAClB,QAAMvB,SAAS,CAACM,cAAD,EAAiBY,KAAjB,CAAf;AACH;;AAED,SAASM,SAAT,CAAmBC,UAAnB,EAA8B;AAC1B;AACA,SAAOpB,KAAK,CAACY,IAAN,CAAW,sCAAX,EAAmDQ,UAAnD,CAAP;AACH;;AAED,UAAUC,MAAV,CAAiBC,MAAjB,EAAwB;AACpB,MAAI;AACA;AACA;AACA,UAAM1B,IAAI,CAACuB,SAAD,EAAYG,MAAM,CAACC,IAAnB,CAAV;AACA,UAAM1B,GAAG,CAAC;AAAE;AACRiB,MAAAA,IAAI,EAAER;AADA,KAAD,CAAT;AAGH,GAPD,CAOE,OAAOS,CAAP,EAAU;AAAE;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMlB,GAAG,CAAC;AACNiB,MAAAA,IAAI,EAAET,eADA;AAENY,MAAAA,KAAK,EAAEF;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUS,WAAV,GAAuB;AACnB,QAAM7B,SAAS,CAACS,eAAD,EAAkBiB,MAAlB,CAAf;AACH;;AAID,SAASI,SAAT,GAAoB;AAChB;AACA,SAAOzB,KAAK,CAACY,IAAN,CAAW,QAAX,CAAP;AACH;;AAED,UAAUc,MAAV,GAAkB;AACd,MAAI;AACA,UAAM3B,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AAAE;AACRiB,MAAAA,IAAI,EAAEN;AADA,KAAD,CAAT;AAGH,GALD,CAKE,OAAOO,CAAP,EAAU;AAAE;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMlB,GAAG,CAAC;AACNiB,MAAAA,IAAI,EAAEL;AADA,KAAD,CAAT;AAGH;AACJ;;AAED,UAAUkB,WAAV,GAAuB;AACnB,QAAMhC,SAAS,CAACY,eAAD,EAAkBmB,MAAlB,CAAf;AACH;;AAED,eAAe,UAAUE,QAAV,GAAoB;AAC/B,QAAMpC,GAAG,CAAC,CACNC,IAAI,CAACyB,UAAD,CADE,EAENzB,IAAI,CAAC+B,WAAD,CAFE,EAEa;AACnB/B,EAAAA,IAAI,CAACkC,WAAD,CAHE,CAAD,CAAT;AAKH,C,CAED;AACA;AACA;AACA","sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\r\nimport axios from \"axios\";\r\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS, LOG_OUT_REQUEST,LOG_OUT_SUCCESS, LOG_OUT_FAILURE } from \"../reducers/user\";\r\n\r\n// axios.defaults.baseURL = 'http://localhost:3065/api';\r\n\r\nfunction loginAPI(loginData){\r\n    //서버에 요청을 보내는 부분\r\n    return axios.post('/login', loginData);\r\n}\r\n\r\nfunction* login(){\r\n    try {\r\n        // yield fork(logger);  // logger는 내기록을 로깅하는 함수,\r\n        yield delay(1000);\r\n        yield put({ // put은 dispatch와 동일\r\n            type: LOG_IN_SUCCESS,\r\n        });\r\n    } catch (e) { // 로그인 실패시\r\n        console.error(e);\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogin(){\r\n    yield takeEvery(LOG_IN_REQUEST, login);\r\n}\r\n\r\nfunction signUpAPI(signUpData){\r\n    //서버에 요청을 보내는 부분\r\n    return axios.post('http://localhost:3065/api/user/login', signUpData);\r\n}\r\n\r\nfunction* signUp(action){\r\n    try {\r\n        // yield fork(logger);  // logger는 내기록을 로깅하는 함수,\r\n        // yield delay(2000);\r\n        yield call(signUpAPI, action.data);\r\n        yield put({ // put은 dispatch와 동일\r\n            type: SIGN_UP_SUCCESS,\r\n        });\r\n    } catch (e) { // 로그인 실패시\r\n        console.error(e);\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n            error: e\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchSignUp(){\r\n    yield takeEvery(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\n\r\n\r\nfunction logoutAPI(){\r\n    //서버에 요청을 보내는 부분\r\n    return axios.post('/login');\r\n}\r\n\r\nfunction* logout(){\r\n    try {\r\n        yield delay(1000);\r\n        yield put({ // put은 dispatch와 동일\r\n            type: LOG_OUT_SUCCESS,\r\n        });\r\n    } catch (e) { // 로그아웃 실패시\r\n        console.error(e);\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogout(){\r\n    yield takeEvery(LOG_OUT_REQUEST, logout);\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchSignUp), //순서의미없음\r\n        fork(watchLogout),\r\n    ]);\r\n}\r\n\r\n/// call은 동기호출, 순서있음\r\n/// fork는 비동기호출, 순서없음\r\n/// take : 해당액션이 dispatch 되면 제너레이터를 next(재게)하게한다\r\n/// yield : 제너레이터함수에서 중단하는 역할\r\n"]},"metadata":{},"sourceType":"module"}