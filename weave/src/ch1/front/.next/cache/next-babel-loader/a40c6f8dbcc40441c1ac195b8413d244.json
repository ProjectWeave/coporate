{"ast":null,"code":"import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\nimport axios from \"axios\";\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE } from \"../reducers/user\";\naxios.defaults.baseURL = 'http://localhost:3065/api';\n\nfunction loginAPI(loginData) {\n  //서버에 요청을 보내는 부분\n  return axios.post('user/login', loginData, {\n    withCredentials: true\n  });\n}\n\nfunction* login(action) {\n  try {\n    // yield fork(logger);  // logger는 내기록을 로깅하는 함수,\n    // yield delay(1000);\n    const result = yield call(loginAPI, action.data);\n    yield put({\n      // put은 dispatch와 동일\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // 로그인 실패시\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, login);\n}\n\nfunction signUpAPI(signUpData) {\n  //서버에 요청을 보내는 부분\n  return axios.post('/user/', signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    // yield fork(logger);  // logger는 내기록을 로깅하는 함수,\n    // yield delay(2000);\n    yield call(signUpAPI, action.data);\n    yield put({\n      // put은 dispatch와 동일\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    // 로그인 실패시\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction logOutAPI() {\n  //서버에 요청을 보내는 부분\n  return axios.post('/user/logout', {}, {\n    withCredentials: true\n  });\n}\n\nfunction* logout(action) {\n  try {\n    // yield delay(1000);\n    yield call(logOutAPI);\n    yield put({\n      // put은 dispatch와 동일\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    // 로그아웃 실패시\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogout() {\n  yield takeEvery(LOG_OUT_REQUEST, logout);\n}\n\nfunction loadUserAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.get('/user/', {\n    withCredentials: true\n  });\n}\n\nfunction* loadUser() {\n  try {\n    // yield call(loadUserAPI);\n    const result = yield call(loadUserAPI);\n    yield put({\n      // put은 dispatch 동일\n      type: LOAD_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchSignUp), //순서의미없음\n  fork(watchLoadUser), fork(watchLogout)]);\n} /// call은 동기호출, 순서있음\n/// fork는 비동기호출, 순서없음\n/// take : 해당액션이 dispatch 되면 제너레이터를 next(재게)하게한다\n/// yield : 제너레이터함수에서 중단하는 역할","map":{"version":3,"sources":["C:/Users/이귀영/Documents/coporate/weave/src/ch1/front/sagas/user.js"],"names":["all","fork","takeLatest","takeEvery","call","put","take","delay","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_FAILURE","SIGN_UP_SUCCESS","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","defaults","baseURL","loginAPI","loginData","post","withCredentials","login","action","result","data","type","e","console","error","watchLogin","signUpAPI","signUpData","signUp","watchSignUp","logOutAPI","logout","watchLogout","loadUserAPI","get","loadUser","watchLoadUser","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,SAAhC,EAA2CC,IAA3C,EAAiDC,GAAjD,EAAsDC,IAAtD,EAA4DC,KAA5D,QAAyE,oBAAzE;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACIC,cADJ,EACoBC,cADpB,EACoCC,cADpC,EAEIC,eAFJ,EAEqBC,eAFrB,EAEsCC,eAFtC,EAGIC,eAHJ,EAGoBC,eAHpB,EAGqCC,eAHrC,EAIIC,iBAJJ,EAIsBC,iBAJtB,EAIwCC,iBAJxC,QAKO,kBALP;AAOAZ,KAAK,CAACa,QAAN,CAAeC,OAAf,GAAyB,2BAAzB;;AAEA,SAASC,QAAT,CAAkBC,SAAlB,EAA4B;AACxB;AACA,SAAOhB,KAAK,CAACiB,IAAN,CAAW,YAAX,EAAyBD,SAAzB,EAAoC;AACvCE,IAAAA,eAAe,EAAE;AADsB,GAApC,CAAP;AAGH;;AAED,UAAUC,KAAV,CAAgBC,MAAhB,EAAuB;AACnB,MAAI;AACA;AACA;AACA,UAAMC,MAAM,GAAG,MAAMzB,IAAI,CAACmB,QAAD,EAAWK,MAAM,CAACE,IAAlB,CAAzB;AACA,UAAMzB,GAAG,CAAC;AAAE;AACR0B,MAAAA,IAAI,EAAErB,cADA;AAENoB,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT;AAIH,GARD,CAQE,OAAOE,CAAP,EAAU;AAAE;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAM3B,GAAG,CAAC;AACN0B,MAAAA,IAAI,EAAEpB;AADA,KAAD,CAAT;AAGH;AACJ;;AAED,UAAUwB,UAAV,GAAsB;AAClB,QAAMhC,SAAS,CAACM,cAAD,EAAiBkB,KAAjB,CAAf;AACH;;AAED,SAASS,SAAT,CAAmBC,UAAnB,EAA8B;AAC1B;AACA,SAAO7B,KAAK,CAACiB,IAAN,CAAW,QAAX,EAAqBY,UAArB,CAAP;AACH;;AAED,UAAUC,MAAV,CAAiBV,MAAjB,EAAwB;AACpB,MAAI;AACA;AACA;AACA,UAAMxB,IAAI,CAACgC,SAAD,EAAYR,MAAM,CAACE,IAAnB,CAAV;AACA,UAAMzB,GAAG,CAAC;AAAE;AACR0B,MAAAA,IAAI,EAAEjB;AADA,KAAD,CAAT;AAGH,GAPD,CAOE,OAAOkB,CAAP,EAAU;AAAE;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAM3B,GAAG,CAAC;AACN0B,MAAAA,IAAI,EAAElB,eADA;AAENqB,MAAAA,KAAK,EAAEF;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUO,WAAV,GAAuB;AACnB,QAAMpC,SAAS,CAACS,eAAD,EAAkB0B,MAAlB,CAAf;AACH;;AAID,SAASE,SAAT,GAAoB;AAChB;AACA,SAAOhC,KAAK,CAACiB,IAAN,CAAW,cAAX,EAA2B,EAA3B,EAA+B;AAClCC,IAAAA,eAAe,EAAE;AADiB,GAA/B,CAAP;AAGH;;AAED,UAAUe,MAAV,CAAiBb,MAAjB,EAAwB;AACpB,MAAI;AACA;AACA,UAAMxB,IAAI,CAACoC,SAAD,CAAV;AACA,UAAMnC,GAAG,CAAC;AAAE;AACR0B,MAAAA,IAAI,EAAEf;AADA,KAAD,CAAT;AAGH,GAND,CAME,OAAOgB,CAAP,EAAU;AAAE;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAM3B,GAAG,CAAC;AACN0B,MAAAA,IAAI,EAAEd,eADA;AAENiB,MAAAA,KAAK,EAAEF;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUU,WAAV,GAAuB;AACnB,QAAMvC,SAAS,CAACY,eAAD,EAAkB0B,MAAlB,CAAf;AACH;;AAGD,SAASE,WAAT,GAAuB;AACnB;AACA,SAAOnC,KAAK,CAACoC,GAAN,CAAU,QAAV,EAAoB;AACzBlB,IAAAA,eAAe,EAAE;AADQ,GAApB,CAAP;AAGD;;AAED,UAAUmB,QAAV,GAAqB;AACnB,MAAI;AACF;AACA,UAAMhB,MAAM,GAAG,MAAMzB,IAAI,CAACuC,WAAD,CAAzB;AACA,UAAMtC,GAAG,CAAC;AAAE;AACV0B,MAAAA,IAAI,EAAEZ,iBADE;AAERW,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOE,CAAP,EAAU;AAAE;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAM3B,GAAG,CAAC;AACR0B,MAAAA,IAAI,EAAEX,iBADE;AAERc,MAAAA,KAAK,EAAEF;AAFC,KAAD,CAAT;AAID;AACF;;AAED,UAAUc,aAAV,GAA0B;AACxB,QAAM3C,SAAS,CAACe,iBAAD,EAAoB2B,QAApB,CAAf;AACD;;AAEH,eAAe,UAAUE,QAAV,GAAoB;AAC/B,QAAM/C,GAAG,CAAC,CACNC,IAAI,CAACkC,UAAD,CADE,EAENlC,IAAI,CAACsC,WAAD,CAFE,EAEa;AACnBtC,EAAAA,IAAI,CAAC6C,aAAD,CAHE,EAIN7C,IAAI,CAACyC,WAAD,CAJE,CAAD,CAAT;AAOH,C,CAED;AACA;AACA;AACA","sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\r\nimport axios from \"axios\";\r\nimport { \r\n    LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, \r\n    SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS, \r\n    LOG_OUT_REQUEST,LOG_OUT_SUCCESS, LOG_OUT_FAILURE,\r\n    LOAD_USER_REQUEST,LOAD_USER_SUCCESS,LOAD_USER_FAILURE\r\n} from \"../reducers/user\";\r\n\r\naxios.defaults.baseURL = 'http://localhost:3065/api';\r\n\r\nfunction loginAPI(loginData){\r\n    //서버에 요청을 보내는 부분\r\n    return axios.post('user/login', loginData, {\r\n        withCredentials: true,\r\n    });\r\n}\r\n\r\nfunction* login(action){\r\n    try {\r\n        // yield fork(logger);  // logger는 내기록을 로깅하는 함수,\r\n        // yield delay(1000);\r\n        const result = yield call(loginAPI, action.data);\r\n        yield put({ // put은 dispatch와 동일\r\n            type: LOG_IN_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (e) { // 로그인 실패시\r\n        console.error(e);\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogin(){\r\n    yield takeEvery(LOG_IN_REQUEST, login);\r\n}\r\n\r\nfunction signUpAPI(signUpData){\r\n    //서버에 요청을 보내는 부분\r\n    return axios.post('/user/', signUpData);\r\n}\r\n\r\nfunction* signUp(action){\r\n    try {\r\n        // yield fork(logger);  // logger는 내기록을 로깅하는 함수,\r\n        // yield delay(2000);\r\n        yield call(signUpAPI, action.data);\r\n        yield put({ // put은 dispatch와 동일\r\n            type: SIGN_UP_SUCCESS,\r\n        });\r\n    } catch (e) { // 로그인 실패시\r\n        console.error(e);\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n            error: e\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchSignUp(){\r\n    yield takeEvery(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\n\r\n\r\nfunction logOutAPI(){\r\n    //서버에 요청을 보내는 부분\r\n    return axios.post('/user/logout', {}, {\r\n        withCredentials: true,\r\n    });\r\n}\r\n\r\nfunction* logout(action){\r\n    try {\r\n        // yield delay(1000);\r\n        yield call(logOutAPI);\r\n        yield put({ // put은 dispatch와 동일\r\n            type: LOG_OUT_SUCCESS,\r\n        });\r\n    } catch (e) { // 로그아웃 실패시\r\n        console.error(e);\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogout(){\r\n    yield takeEvery(LOG_OUT_REQUEST, logout);\r\n}\r\n\r\n\r\nfunction loadUserAPI() {\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.get('/user/', {\r\n      withCredentials: true,\r\n    });\r\n  }\r\n  \r\n  function* loadUser() {\r\n    try {\r\n      // yield call(loadUserAPI);\r\n      const result = yield call(loadUserAPI);\r\n      yield put({ // put은 dispatch 동일\r\n        type: LOAD_USER_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) { // loginAPI 실패\r\n      console.error(e);\r\n      yield put({\r\n        type: LOAD_USER_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n  }\r\n  \r\n  function* watchLoadUser() {\r\n    yield takeEvery(LOAD_USER_REQUEST, loadUser);\r\n  }\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchSignUp), //순서의미없음\r\n        fork(watchLoadUser),\r\n        fork(watchLogout),\r\n        \r\n    ]);\r\n}\r\n\r\n/// call은 동기호출, 순서있음\r\n/// fork는 비동기호출, 순서없음\r\n/// take : 해당액션이 dispatch 되면 제너레이터를 next(재게)하게한다\r\n/// yield : 제너레이터함수에서 중단하는 역할\r\n"]},"metadata":{},"sourceType":"module"}