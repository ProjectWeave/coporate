{"ast":null,"code":"import { all, delay, fork, put, takeLatest, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_GROUP_REQUEST, ADD_GROUP_SUCCESS, ADD_GROUP_FAILURE, LOAD_MAIN_POSTS_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS } from '../reducers/post'; // 게시물 올리기\n\nfunction addPostAPI(postData) {\n  return axios.post(\"/post\", postData, {\n    withCredentials: true\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n} // 게시물 로드하기\n\n\nfunction loadMainPostsAPI() {\n  return axios.get('/posts');\n}\n\nfunction* loadMainPosts() {\n  try {\n    const result = yield call(loadMainPostsAPI);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadMainPosts() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n} // 그룹 만들기\n\n\nfunction addGroupPosttAPI() {// return axios.post(\"/gpost\", gpostData,{\n  //     withCredentials: true\n  // });\n}\n\nfunction* addGroupPost(action) {\n  try {\n    yield delay(2000);\n    yield put({\n      type: ADD_GROUP_SUCCESS,\n      data: {\n        postId: action.data.postId\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_GROUP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddGroupPost() {\n  yield takeLatest(ADD_GROUP_REQUEST, addGroupPost);\n} // 댓글 올리기\n\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* addComment(action) {\n  try {\n    // yield delay(2000);\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId,\n        comment: result.data\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadMainPosts), fork(watchAddPost), fork(watchAddComment), fork(watchAddGroupPost)]);\n}","map":{"version":3,"sources":["C:/Users/이귀영/Documents/coporate/weave/src/ch1/front/sagas/post.js"],"names":["all","delay","fork","put","takeLatest","call","axios","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_GROUP_REQUEST","ADD_GROUP_SUCCESS","ADD_GROUP_FAILURE","LOAD_MAIN_POSTS_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","addPostAPI","postData","post","withCredentials","addPost","action","result","data","type","e","error","watchAddPost","loadMainPostsAPI","get","loadMainPosts","watchLoadMainPosts","addGroupPosttAPI","addGroupPost","postId","watchAddGroupPost","addCommentAPI","content","addComment","comment","console","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, delay, fork, put, takeLatest, call } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport { \r\n    ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, \r\n    ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS,\r\n    ADD_GROUP_REQUEST, ADD_GROUP_SUCCESS, ADD_GROUP_FAILURE,\r\n    LOAD_MAIN_POSTS_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS \r\n} from '../reducers/post';\r\n\r\n// 게시물 올리기\r\nfunction addPostAPI(postData){\r\n    return axios.post(\"/post\", postData,{\r\n        withCredentials: true\r\n    });\r\n}\r\nfunction* addPost(action) {\r\n    try {\r\n      const result = yield call(addPostAPI, action.data);\r\n      yield put({\r\n        type: ADD_POST_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      yield put({\r\n        type: ADD_POST_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n}\r\nfunction* watchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\n// 게시물 로드하기\r\nfunction loadMainPostsAPI() {\r\n    return axios.get('/posts');\r\n} \r\nfunction* loadMainPosts() {\r\n    try {\r\n      const result = yield call(loadMainPostsAPI);\r\n      yield put({\r\n        type: LOAD_MAIN_POSTS_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      yield put({\r\n        type: LOAD_MAIN_POSTS_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n}  \r\nfunction* watchLoadMainPosts() {\r\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\r\n}\r\n\r\n\r\n// 그룹 만들기\r\nfunction addGroupPosttAPI(){\r\n    // return axios.post(\"/gpost\", gpostData,{\r\n    //     withCredentials: true\r\n    // });\r\n}\r\nfunction* addGroupPost(action){\r\n    try{\r\n        yield delay(2000);\r\n        yield put({\r\n            type: ADD_GROUP_SUCCESS,\r\n            data:{\r\n                postId : action.data.postId,\r\n            },\r\n        });\r\n    } catch (e){ \r\n        yield put({\r\n            type: ADD_GROUP_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\nfunction* watchAddGroupPost(){\r\n    yield takeLatest(ADD_GROUP_REQUEST, addGroupPost);\r\n}\r\n\r\n\r\n// 댓글 올리기\r\nfunction addCommentAPI(data){\r\n    return axios.post(`/post/${data.postId}/comment`, { content: data.content }, {\r\n        withCredentials: true,\r\n      });\r\n}\r\nfunction* addComment(action){\r\n    try{\r\n        // yield delay(2000);\r\n        const result = yield call(addCommentAPI, action.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data:{\r\n                postId : action.data.postId,\r\n                comment: result.data,\r\n            },\r\n        });\r\n    } catch (e){ \r\n        console.error(e);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: e,\r\n        });\r\n    }\r\n}\r\nfunction* watchAddComment(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\n\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchLoadMainPosts),\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        fork(watchAddGroupPost),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}