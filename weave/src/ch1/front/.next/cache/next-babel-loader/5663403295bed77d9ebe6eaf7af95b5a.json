{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uC774\\uADC0\\uC601\\\\Documents\\\\coporate\\\\weave\\\\src\\\\ch1\\\\front\\\\components\\\\ContentForm.js\";\nvar __jsx = React.createElement;\n// mode변경 test\nimport React, { useCallback, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\nimport '../components/Contents.css';\nimport '../components/reset.css';\n\nconst ContentForm = ({\n  post\n}) => {\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    0: comments,\n    1: setComments\n  } = useState('');\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    commentAdded,\n    isAddingComment,\n    CommentPosts\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch(); //댓글창토글\n\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []); // 댓글\n\n  const onChangeComment = useCallback(e => {\n    setComments(e.target.value);\n  }, []); // 댓글올리기 사이클\n\n  const onSubmitComment = useCallback(e => {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id]); // 댓글 성공시, 빈텍스트로 \n\n  useEffect(() => {\n    setComments('');\n  }, [commentAdded === true]); // 댓글삭제하기\n\n  const onRemoveComments = () => {\n    alert('댓글을 삭제하시겠습니까?');\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"postbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"contBox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, post.User.nickname, \" \\uB2D8\\uC758 \\uAC8C\\uC2DC\\uBB3C\"), __jsx(\"img\", {\n    style: {\n      display: \"block\",\n      margin: \"0 auto\",\n      height: \"200px\"\n    },\n    alt: \"example\",\n    src: post.img,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, post.content)), __jsx(\"div\", {\n    className: \"btnsbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, __jsx(\"button\", {\n    type: \"button\",\n    className: \"commentBtn\",\n    value: commentFormOpened,\n    onClick: onToggleComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), __jsx(\"button\", {\n    type: \"button\",\n    className: \"likeBtn\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), __jsx(\"button\", {\n    type: \"button\",\n    className: \"removeBtn\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }), commentFormOpened === true && __jsx(\"form\", {\n    className: \"commentbox\",\n    onSubmit: onSubmitComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, __jsx(\"textarea\", {\n    className: \"comment\",\n    value: comments,\n    onChange: onChangeComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), __jsx(\"button\", {\n    type: \"primary\",\n    htmlType: \"submit\",\n    className: \"combtn\",\n    loading: isAddingComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"COMMENT\")), commentFormOpened === true && __jsx(\"div\", {\n    style: {\n      display: \"inline-block\",\n      width: \"100%\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    style: {\n      marginLeft: \"10px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, commentAdded ? '댓글' + post.Comments.length : '댓글' + '0'), __jsx(\"div\", {\n    className: \"comline\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), CommentPosts.map(v => {\n    return __jsx(\"li\", {\n      key: v.createdAt,\n      style: {\n        listStyle: \"none\",\n        display: \"inline-block\",\n        clear: \"both\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, v.User.nickname, \" : \", v.content, __jsx(\"button\", {\n      type: \"button\",\n      className: \"remove\",\n      onClick: onRemoveComments,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"REMOVE\"));\n  })))));\n};\n\nContentForm.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string\n  })\n};\nexport default ContentForm;","map":{"version":3,"sources":["C:/Users/이귀영/Documents/coporate/weave/src/ch1/front/components/ContentForm.js"],"names":["React","useCallback","useState","useEffect","PropTypes","useSelector","useDispatch","ADD_COMMENT_REQUEST","ContentForm","post","commentFormOpened","setCommentFormOpened","comments","setComments","me","state","user","commentAdded","isAddingComment","CommentPosts","dispatch","onToggleComment","prev","onChangeComment","e","target","value","onSubmitComment","preventDefault","alert","type","data","postId","id","content","commentText","onRemoveComments","User","nickname","display","margin","height","img","width","marginLeft","Comments","length","map","v","createdAt","listStyle","clear","propTypes","shape","object","string"],"mappings":"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","sourcesContent":["// mode변경 test\r\nimport React, { useCallback, useState, useEffect }  from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\r\n\r\nimport '../components/Contents.css';\r\nimport '../components/reset.css';\r\n\r\nconst ContentForm = ({post}) => {\r\n\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n    const [comments, setComments ] = useState('');\r\n    \r\n    const { me } = useSelector(state => state.user);\r\n    const { commentAdded, isAddingComment,CommentPosts } = useSelector(state => state.post);\r\n    const dispatch = useDispatch();\r\n\r\n   \r\n    //댓글창토글\r\n    const onToggleComment = useCallback(() => {\r\n        setCommentFormOpened(prev => !prev);\r\n      }, []);\r\n\r\n    // 댓글\r\n    const onChangeComment = useCallback((e) => {\r\n        setComments(e.target.value);\r\n    }, []);\r\n\r\n    // 댓글올리기 사이클\r\n    const onSubmitComment = useCallback((e) => {\r\n        e.preventDefault();\r\n        if(!me){\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n        return dispatch({\r\n            type: ADD_COMMENT_REQUEST,\r\n            data:{\r\n                postId: post.id,\r\n                content: commentText,\r\n            },\r\n        });\r\n    }, [me && me.id]);\r\n    \r\n    // 댓글 성공시, 빈텍스트로 \r\n    useEffect(() => {\r\n        setComments('');\r\n    },[commentAdded === true]);\r\n\r\n    // 댓글삭제하기\r\n    const onRemoveComments = () => {\r\n        alert('댓글을 삭제하시겠습니까?');\r\n    };\r\n\r\n    return(\r\n        <>\r\n            <div className=\"postbox\">   \r\n                <div className=\"contBox\">\r\n                    <p>{post.User.nickname} 님의 게시물</p>\r\n                    <img style={{display:\"block\", margin:\"0 auto\", height:\"200px\"}} alt=\"example\" src={post.img}/> \r\n                    <div>{post.content}</div>\r\n                </div>\r\n                <div className=\"btnsbox\">\r\n                    <button type=\"button\" className=\"commentBtn\"  value={commentFormOpened} onClick={onToggleComment} />\r\n                    <button type=\"button\" className=\"likeBtn\" /> \r\n                    <button type=\"button\" className=\"removeBtn\" />\r\n                    {commentFormOpened===true &&\r\n                        <form className=\"commentbox\" onSubmit={onSubmitComment}>\r\n                            <textarea className=\"comment\" value={comments} onChange={onChangeComment} />\r\n                            <button type=\"primary\" htmlType=\"submit\" className=\"combtn\" loading={isAddingComment} >COMMENT</button>\r\n                        </form>\r\n                    }\r\n                    {/* 댓글올라갈부분 */}\r\n                    {commentFormOpened===true && (\r\n                        <div style={{display:\"inline-block\", width:\"100%\"}}>\r\n                            <p style={{marginLeft:\"10px\"}}>{commentAdded ? '댓글' + post.Comments.length : '댓글'+ '0'}</p>\r\n                            <div className=\"comline\"></div>\r\n\r\n                            { CommentPosts.map((v) => {\r\n                                return( \r\n                                    <li key={v.createdAt} style={{\r\n                                        listStyle:\"none\", display:\"inline-block\", clear:\"both\"}}\r\n                                    >\r\n                                        {v.User.nickname} : {v.content}\r\n                                        <button type=\"button\" className=\"remove\" onClick={onRemoveComments} >REMOVE</button>\r\n                                    </li>\r\n                                );\r\n                            })\r\n                            }\r\n                        </div>\r\n                        )\r\n                    }\r\n                </div> \r\n            </div>\r\n        </>\r\n    );\r\n    \r\n\r\n};\r\n\r\nContentForm.propTypes={\r\n    post: PropTypes.shape({\r\n        User: PropTypes.object,\r\n        content: PropTypes.string,\r\n        img: PropTypes.string,\r\n    }),\r\n};\r\n\r\n\r\nexport default ContentForm;\r\n"]},"metadata":{},"sourceType":"module"}